{"version":3,"file":"codestring.min.js","sources":["../src/codestring.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/codestring\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([], function() {\n\n    class CodeString {\n        #codeString;\n        #userFunctionLinesCount;\n\n        static #auxFunctions = `function print(string) {\n    outputString += string + '\\\\n';\n}\nfunction input(prompt) {\n    return prompt;\n}\n`;\n        static #codeEnding = `return outputString;\n})();\n`;\n        constructor(codeString) {\n            if (arguments.length > 0) {\n                this.#codeString = codeString;\n            } else {\n                this.#codeString = '';\n            }\n            this.#userFunctionLinesCount = 0;\n        }\n\n        getCompleteCodeString() {\n            return this.#codeString;\n        }\n\n        getPrintableCodeString() {\n            // Split code by unescaped line breaks (code might have escaped line breaks)\n            const codeLines = this.#codeString.split(/(?<!\\\\)\\n/);\n\n            // Add lines from user functions\n            const functionLines = codeLines.slice(0, this.#userFunctionLinesCount);\n\n            // Add lines from start block\n            const startIndex = codeLines.findIndex(line => line.includes('(function () {')) + 1;\n            const endIndex = codeLines.findIndex(line => line.includes('return outputString;'));\n            const startCodeLines = codeLines.slice(startIndex, endIndex);\n\n            return functionLines.concat(startCodeLines).join('\\n');\n        }\n\n        getSubmittableCodeString() {\n            //replace return outputString; with process.stdout.write(outputString);\n            let lastIndex = this.#codeString.lastIndexOf('return outputString;');\n            return this.#codeString.substring(0, lastIndex) + 'process.stdout.write(outputString);' +\n                this.#codeString.substring(lastIndex + 'return outputString;'.length);\n        }\n\n        addVariable(variableName, variableValue) {\n            // Check if variableName is a valid variable name\n            const regex = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n            if (!regex.test(variableName)) {\n                throw new Error('Invalid variable name');\n            }\n            this.#codeString += 'let ' + variableName + ' = ' + variableValue + ';\\n';\n            return this.#codeString;\n        }\n\n        addLine(line) {\n            // Check if line does not have line break\n            if (line.includes('\\n')) {\n                throw new Error('Invalid line');\n            }\n            this.#codeString += line + '\\n';\n            return this.#codeString;\n        }\n\n        addEnding() {\n            this.#codeString += CodeString.#codeEnding;\n            return this.#codeString;\n        }\n\n        addAuxFunctions(inputFuncDecs) {\n            const auxFunctions = inputFuncDecs + CodeString.#auxFunctions;\n            this.#codeString += auxFunctions;\n            return this.#codeString;\n        }\n\n        addMainCode(codeString) {\n            this.#codeString += codeString;\n            return this.#codeString;\n        }\n\n        addFunction(functionCode) {\n            // Update user function lines count\n            const regex = /(?<!\\\\)\\n/g;\n            const functionLinesCount = (functionCode.match(regex) || []).length;\n            this.#userFunctionLinesCount += functionLinesCount;\n\n            this.#codeString = functionCode + this.#codeString;\n            return this.#codeString;\n        }\n    }\n    return CodeString;\n});\n"],"names":["define","CodeString","codeString","arguments","length","this","codeLines","_classPrivateFieldGet","split","functionLines","slice","startIndex","findIndex","line","includes","endIndex","startCodeLines","concat","join","lastIndex","lastIndexOf","substring","variableName","variableValue","test","Error","inputFuncDecs","auxFunctions","functionCode","functionLinesCount","match"],"mappings":";;;;;;8RAOAA,mCAAO,IAAI,2EAEDC,0CAcUC,gPACJC,UAAUC,OAAS,EACAF,WAEA,uDAEQ,wHAGnC,wCACWG,wDAGX,eAEUC,UAAYC,wCAAiBC,MAAM,aAGnCC,cAAgBH,UAAUI,MAAM,wBAAGL,+BAGnCM,WAAaL,UAAUM,WAAU,SAAAC,aAAQA,KAAKC,SAAS,qBAAqB,EAC5EC,SAAWT,UAAUM,WAAU,SAAAC,aAAQA,KAAKC,SAAS,2BACrDE,eAAiBV,UAAUI,MAAMC,WAAYI,iBAE5CN,cAAcQ,OAAOD,gBAAgBE,KAAK,8CAGrD,eAEQC,UAAYZ,wCAAiBa,YAAY,+BACtCb,wCAAiBc,UAAU,EAAGF,WAAa,sCAC9CZ,wCAAiBc,UAAUF,UAAY,uBAAuBf,mCAGtE,SAAYkB,aAAcC,mBAER,2BACHC,KAAKF,oBACN,IAAIG,MAAM,+GAEA,OAASH,aAAe,MAAQC,cAAgB,6BAC7DlB,yCAGX,SAAQQ,SAEAA,KAAKC,SAAS,YACR,IAAIW,MAAM,uGAEAZ,KAAO,6BACpBR,2CAGX,iIACwBJ,WArEtBA,+CAsESI,iDAGX,SAAgBqB,mBACNC,aAAeD,8CAAgBzB,WA1EvCA,gHA2EsB0B,oCACbtB,6CAGX,SAAYH,kGACYA,kCACbG,6CAGX,SAAYuB,kBAGFC,oBAAsBD,aAAaE,MAD3B,eAC2C,IAAI1B,qHAC7ByB,2DAEbD,mCAAevB,yCAC3BA,6aAGRJ"}