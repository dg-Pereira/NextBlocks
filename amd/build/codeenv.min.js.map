{"version":3,"file":"codeenv.min.js","sources":["../src/codeenv.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/env\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\nimport {replaceCode, runTests} from \"./lib\";\n\nconst toolbox = {\n    'kind': 'categoryToolbox',\n    'readOnly': true,\n    'contents': [\n        {\n            'kind': 'toolboxlabel',\n            'name': 'NextBlocks',\n            'colour': 'darkslategrey'\n        },\n        {\n            'kind': 'category',\n            'name': 'Logic',\n            'colour': '5b80a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa fa-cog',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'controls_if',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_compare',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_operation',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_boolean',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Math',\n            'colour': '5b67a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-plus-minus',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'math_number',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'math_arithmetic',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Text',\n            'colour': '5ba58c',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-font',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_print',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Variables',\n            'colour': 'a55b80',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-clipboard-list',\n            },\n            'custom': 'VARIABLE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Functions',\n            'colour': '995ba5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-code',\n            },\n            'custom': 'PROCEDURE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Input',\n            'colour': '180',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-keyboard',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_multiline_input',\n                },\n            ],\n        },\n    ],\n};\n\nconst options = {\n    toolbox: toolbox,\n    collapse: true,\n    comments: true,\n    disable: true,\n    maxBlocks: Infinity,\n    trashcan: true,\n    horizontalLayout: false,\n    toolboxPosition: 'start',\n    css: true,\n    media: 'https://blockly-demo.appspot.com/static/media/',\n    rtl: false,\n    scrollbars: true,\n    sounds: true,\n    oneBasedIndex: false,\n    grid: {\n        spacing: 20,\n        length: 1,\n        colour: '#888',\n        snap: false,\n    },\n    zoom: {\n        controls: true,\n        wheel: true,\n        startScale: 1,\n        maxScale: 3,\n        minScale: 0.3,\n        scaleSpeed: 1.2,\n    },\n};\n\nlet workspace;\n\nexport const init = (contents) => {\n    workspace = Blockly.inject('blocklyDiv', options);\n\n    const runButton = document.getElementById('runButton');\n    runButton.addEventListener('click', runCode);\n\n    if (contents != '') {\n        runTestsHandler(contents);\n    }\n};\n\n/**\n * @param {String} contents the contents of the tests file\n */\nfunction runTestsHandler(contents) {\n    // Listen for clicks on the run tests button\n    const runTestsButton = document.getElementById('runTestsButton');\n    runTestsButton.addEventListener('click', () => { // Needs anonymous function wrap to pass argument\n        runTests(contents);\n    });\n}\n\n/**\n *\n */\nfunction silentRunCode() {\n    let code = javascript.javascriptGenerator.workspaceToCode(workspace);\n\n    const preamble = `(function () {\n    let outputString = \\`\\`;\\n`;\n    const postscript = `return outputString;\n})();\\n`;\n    // Add a preamble and a postscript to the code.\n    code = preamble + code + postscript;\n\n    replaceCode(code);\n    // eslint-disable-next-line no-eval\n    return eval(code);\n}\n\n/**\n *\n */\nfunction runCode() {\n    // eslint-disable-next-line no-eval,no-console\n    const output = silentRunCode();\n\n    const outputDiv = document.getElementById('outputDiv');\n    outputDiv.innerHTML += output;\n}\n\n// eslint-disable-next-line no-unused-vars\n// Redefine the text_print block to use the outputString variable instead of alert.\njavascript.javascriptGenerator.forBlock.text_print = function(block, generator) {\n    return (\n        \"outputString += \" +\n        (generator.valueToCode(\n            block,\n            \"TEXT\",\n            Blockly.JavaScript.ORDER_NONE\n        ) || \"''\") +\n        \"+'<br>';\\n\"\n    );\n};\n\nBlockly.Blocks.text_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"text input:\")\n            .appendField(new Blockly.FieldTextInput('text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_multiline_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"multiline text input:\")\n            .appendField(new Blockly.FieldMultilineInput('multiline \\n text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = '\"' + text + '\"';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_multiline_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = \"`\" + text + \"`\";\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\nclass CustomCategory extends Blockly.ToolboxCategory {\n    /**\n     * Constructor for a custom category.\n     * @override\n     */\n    constructor(categoryDef, toolbox, optParent) {\n        super(categoryDef, toolbox, optParent);\n    }\n\n    /** @override */\n    addColourBorder_(colour){\n        this.rowDiv_.style.backgroundColor = colour;\n    }\n\n    /** @override */\n    setSelected(isSelected) {\n        // We do not store the label span on the category, so use getElementsByClassName.\n        var labelDom = this.rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n        if (isSelected) {\n            // Change the background color of the div to white.\n            this.rowDiv_.style.backgroundColor = 'white';\n            // Set the colour of the text to the colour of the category.\n            labelDom.style.color = this.colour_;\n            this.iconDom_.style.color = this.colour_;\n        } else {\n            // Set the background back to the original colour.\n            this.rowDiv_.style.backgroundColor = this.colour_;\n            // Set the text back to white.\n            labelDom.style.color = 'white';\n            this.iconDom_.style.color = 'white';\n        }\n        // This is used for accessibility purposes.\n        Blockly.utils.aria.setState(/** @type {!Element} */ (this.htmlDiv_),\n            Blockly.utils.aria.State.SELECTED, isSelected);\n    }\n}\n\nclass ToolboxLabel extends Blockly.ToolboxItem {\n    constructor(toolboxItemDef, parentToolbox) {\n        super(toolboxItemDef, parentToolbox);\n    }\n\n    /** @override */\n    init() {\n        // Create the label.\n        this.label = document.createElement('label');\n\n        // Set the name.\n        this.label.textContent = this.toolboxItemDef_.name;\n        // Set the color.\n        this.label.style.color = this.toolboxItemDef_.colour;\n    }\n\n    /** @override */\n    getDiv() {\n        return this.label;\n    }\n}\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, 'toolboxlabel', ToolboxLabel);\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, Blockly.ToolboxCategory.registrationName, CustomCategory, true);\n"],"names":["toolbox","options","collapse","comments","disable","maxBlocks","Infinity","trashcan","horizontalLayout","toolboxPosition","css","media","rtl","scrollbars","sounds","oneBasedIndex","grid","spacing","length","colour","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","workspace","init","contents","Blockly","inject","document","getElementById","addEventListener","runCode","runTestsHandler","silentRunCode","code","javascript","javascriptGenerator","workspaceToCode","preamble","postscript","eval","output","innerHTML","forBlock","text_print","block","generator","valueToCode","JavaScript","ORDER_NONE","Blocks","text_input","appendDummyInput","appendField","FieldTextInput","setOutput","setColour","setTooltip","setHelpUrl","text_multiline_input","FieldMultilineInput","getFieldValue","CustomCategory","ToolboxCategory","categoryDef","optParent","rowDiv_","style","backgroundColor","isSelected","labelDom","this","getElementsByClassName","color","colour_","iconDom_","utils","aria","setState","htmlDiv_","State","SELECTED","ToolboxLabel","ToolboxItem","toolboxItemDef","parentToolbox","label","createElement","textContent","toolboxItemDef_","name","registry","register","Type","TOOLBOX_ITEM","registrationName"],"mappings":"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"}