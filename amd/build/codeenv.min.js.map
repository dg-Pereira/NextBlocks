{"version":3,"file":"codeenv.min.js","sources":["../src/codeenv.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/env\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\nimport {getWorkspaceCode, replaceCode, runTests, testsAccordion} from \"./lib\";\nimport {saveWorkspace} from \"./repository\";\n\nconst toolbox = {\n    'kind': 'categoryToolbox',\n    'readOnly': true,\n    'contents': [\n        {\n            'kind': 'toolboxlabel',\n            'name': 'NextBlocks',\n            'colour': 'darkslategrey'\n        },\n        {\n            'kind': 'category',\n            'name': 'Logic',\n            'colour': '5b80a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa fa-cog',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'controls_if',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_compare',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_operation',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_boolean',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Math',\n            'colour': '5b67a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-plus-minus',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'math_number',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'math_arithmetic',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Text',\n            'colour': '5ba58c',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-font',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_print',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Variables',\n            'colour': 'a55b80',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-clipboard-list',\n            },\n            'custom': 'VARIABLE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Functions',\n            'colour': '995ba5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-code',\n            },\n            'custom': 'PROCEDURE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Input',\n            'colour': '180',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-keyboard',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_multiline_input',\n                },\n            ],\n        },\n    ],\n};\n\nconst options = {\n    toolbox: toolbox,\n    collapse: true,\n    comments: true,\n    disable: true,\n    maxBlocks: Infinity,\n    trashcan: true,\n    horizontalLayout: false,\n    toolboxPosition: 'start',\n    css: true,\n    media: 'https://blockly-demo.appspot.com/static/media/',\n    rtl: false,\n    scrollbars: true,\n    sounds: true,\n    oneBasedIndex: false,\n    grid: {\n        spacing: 20,\n        length: 1,\n        colour: '#888',\n        snap: false,\n    },\n    zoom: {\n        controls: true,\n        wheel: true,\n        startScale: 1,\n        maxScale: 3,\n        minScale: 0.3,\n        scaleSpeed: 1.2,\n    },\n};\n\n// GetMainWorkspace might remove need for global variable\nlet nextblocksWorkspace;\n\n/**\n * @param {String} contents The contents of the tests file\n * @param {String} loadedSave The contents of the loaded save, in a base64-encoded JSON string\n */\nexport const init = (contents, loadedSave) => {\n    const blocklyDiv = document.getElementById('blocklyDiv');\n    const blocklyArea = document.getElementById('blocklyArea');\n    nextblocksWorkspace = Blockly.inject(blocklyDiv, options);\n\n    // Use resize observer instead of window resize event. This captures both window resize and element resize\n    const resizeObserver = new ResizeObserver(() => onResize(blocklyArea, blocklyDiv, nextblocksWorkspace));\n    resizeObserver.observe(blocklyArea);\n\n    // Parse json from contents\n    const tests = JSON.parse(contents);\n\n    if (tests !== null) {\n        // Create forced input blocks from tests file. Only add to workspace if there is no workspace to load. If there\n        // was a workspace to load, they would be added twice.\n        const inputs = tests[0].inputs;\n        inputs.forEach((input, i) => {\n            const inputName = Object.keys(input)[0];\n            createForcedInputBlock(inputName); // Doesn't add block to workspace, just defines it. Needed for save loading\n\n            if (loadedSave === null) { // Only add to workspace if there is no workspace to load\n                const blockName = \"forced_input_\" + inputName;\n                let newBlock = addBlockToWorkspace(blockName, nextblocksWorkspace);\n                newBlock.moveBy(0, i * 50); // Move block down a bit so that they don't overlap\n            }\n        });\n    }\n\n    // Load the save, if there is one\n    if (loadedSave !== null) {\n        loadSave(loadedSave, nextblocksWorkspace);\n    }\n\n    setupButtons(tests, contents, nextblocksWorkspace);\n};\n\nconst onResize = function(blocklyArea, blocklyDiv, nextblocksWorkspace) {\n    // Compute the absolute coordinates and dimensions of blocklyArea.\n    let element = blocklyArea;\n    let x = 0;\n    let y = 0;\n    do {\n        x += element.offsetLeft;\n        y += element.offsetTop;\n        element = element.offsetParent;\n    } while (element);\n    // Position blocklyDiv over blocklyArea.\n    blocklyDiv.style.left = x + 'px';\n    blocklyDiv.style.top = y + 'px';\n    blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';\n    blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';\n    Blockly.svgResize(nextblocksWorkspace);\n};\n\n/**\n * @param {String} blockName The name of the input block to be added (prompt on the left side of the block\n * @param {WorkspaceSvg} workspace The workspace to add the input block to\n * @returns {BlockSvg} The newly created block\n */\nfunction addBlockToWorkspace(blockName, workspace) {\n    const newBlock = workspace.newBlock(blockName);\n    newBlock.initSvg();\n    newBlock.render();\n    return newBlock;\n}\n\n/**\n * @param {String} loadedSave\n * @param {WorkspaceSvg} workspace\n */\nfunction loadSave(loadedSave, workspace) {\n    const state = JSON.parse(atob(loadedSave));\n    Blockly.serialization.workspaces.load(state, workspace);\n}\n\n/**\n * @param {{}} tests\n * @param {String} contents\n * @param {WorkspaceSvg} workspace\n */\nfunction setupButtons(tests, contents, workspace) {\n    // Listen for clicks on the run button\n    const runButton = document.getElementById('runButton');\n    runButton.addEventListener('click', function() {\n        let code = getWorkspaceCode(workspace);\n        runCode(code);\n    });\n\n    // Listen for clicks on the run tests button\n    if (contents !== '') {\n        const runTestsButton = document.getElementById('runTestsButton');\n        runTestsButton.addEventListener('click', () => { // Needs anonymous function wrap to pass argument\n            const results = runTests(workspace, tests);\n            displayTestResults(results, tests);\n        });\n    }\n\n    // Listen for clicks on the save button\n    const saveButton = document.getElementById('saveButton');\n    saveButton.addEventListener('click', saveState);\n}\n\n/**\n * Saves the current state of the workspace to the database, for later retrieval and display\n */\nexport const saveState = async() => {\n    const state = Blockly.serialization.workspaces.save(nextblocksWorkspace);\n    const stateB64 = btoa(JSON.stringify(state));\n    const cmid = getCMID();\n    await saveWorkspace(cmid, stateB64);\n};\n\n/**\n * @returns {Number} The course module id of the current page\n */\nfunction getCMID() {\n    const classList = document.body.classList;\n    const cmidClass = Array.from(classList).find((className) => className.startsWith('cmid-'));\n    return parseInt(cmidClass.split('-')[1]);\n}\n\n/**\n * @param {String} prompt\n */\nfunction createForcedInputBlock(prompt) {\n    const blockName = \"forced_input_\" + prompt;\n    Blockly.Blocks[blockName] = {\n        init: function() {\n            this.appendDummyInput()\n                .appendField(prompt)\n                .appendField(new Blockly.FieldTextInput('text'), prompt);\n            this.setOutput(true, \"String\");\n            this.setDeletable(false);\n            this.setColour(180);\n            this.setTooltip(\"\");\n            this.setHelpUrl(\"\");\n        }\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    javascript.javascriptGenerator.forBlock[blockName] = function(block, generator) {\n        const text = block.getFieldValue(prompt);\n        let code = '(function () { let ' + prompt + ' = \"' + text + '\"; return ' + prompt + ';})()';\n        return [code, Blockly.JavaScript.ORDER_NONE];\n    };\n}\n\n/**\n * @param {any[]} results\n * @param {{}} tests\n */\nfunction displayTestResults(results, tests) {\n    const testResultsDiv = document.getElementById('output-div');\n    testResultsDiv.innerHTML = testsAccordion(results, tests);\n}\n\n/**\n * @param {String} code The Javascript code to be run\n * @returns {any} The output of the code\n * Runs the code and returns the output, does not display it\n * TODO: do something other than use eval\n */\nfunction silentRunCode(code) {\n    // eslint-disable-next-line no-eval\n    return eval(code);\n}\n\n/**\n * @param {String} code The Javascript code to be run\n * Runs the code and displays the output in the output div\n */\nfunction runCode(code) {\n    const output = silentRunCode(code);\n    replaceCode(code);\n    const outputDiv = document.getElementById('output-div');\n    outputDiv.innerHTML = output;\n}\n\n// eslint-disable-next-line no-extend-native\nString.prototype.hideWrapperFunction = function() {\n    const lines = this.split('\\n');\n    lines.splice(0, 2); // Remove the first two lines\n    return lines.join('\\n');\n};\n\n// eslint-disable-next-line no-extend-native\nString.prototype.swapCase = function() {\n    var newString = '';\n    for (var i = 0; i < this.length; i++) {\n        var c = this[i];\n        newString += c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n    }\n    return newString;\n};\n\n// eslint-disable-next-line no-unused-vars\n// Redefine the text_print block to use the outputString variable instead of alert.\njavascript.javascriptGenerator.forBlock.text_print = function(block, generator) {\n    return (\n        \"outputString += \" +\n        (generator.valueToCode(\n            block,\n            \"TEXT\",\n            Blockly.JavaScript.ORDER_NONE\n        ) || \"''\") +\n        \";\\n\"\n    );\n};\n\nBlockly.Blocks.text_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"text input:\")\n            .appendField(new Blockly.FieldTextInput('text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_multiline_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"multiline text input:\")\n            .appendField(new Blockly.FieldMultilineInput('multiline \\n text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = '\"' + text + '\"';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_multiline_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = \"`\" + text + \"`\";\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\nclass CustomCategory extends Blockly.ToolboxCategory {\n    /**\n     * Constructor for a custom category.\n     * @override\n     */\n    constructor(categoryDef, toolbox, optParent) {\n        super(categoryDef, toolbox, optParent);\n    }\n\n    /** @override */\n    addColourBorder_(colour) {\n        this.rowDiv_.style.backgroundColor = colour;\n    }\n\n    /** @override */\n    setSelected(isSelected) {\n        // We do not store the label span on the category, so use getElementsByClassName.\n        var labelDom = this.rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n        if (isSelected) {\n            // Change the background color of the div to white.\n            this.rowDiv_.style.backgroundColor = 'white';\n            // Set the colour of the text to the colour of the category.\n            labelDom.style.color = this.colour_;\n            this.iconDom_.style.color = this.colour_;\n        } else {\n            // Set the background back to the original colour.\n            this.rowDiv_.style.backgroundColor = this.colour_;\n            // Set the text back to white.\n            labelDom.style.color = 'white';\n            this.iconDom_.style.color = 'white';\n        }\n        // This is used for accessibility purposes.\n        Blockly.utils.aria.setState(/** @type {!Element} */ (this.htmlDiv_),\n            Blockly.utils.aria.State.SELECTED, isSelected);\n    }\n}\n\nclass ToolboxLabel extends Blockly.ToolboxItem {\n    constructor(toolboxItemDef, parentToolbox) {\n        super(toolboxItemDef, parentToolbox);\n    }\n\n    /** @override */\n    init() {\n        // Create the label.\n        this.label = document.createElement('label');\n\n        // Set the name.\n        this.label.textContent = this.toolboxItemDef_.name;\n        // Set the color.\n        this.label.style.color = this.toolboxItemDef_.colour;\n    }\n\n    /** @override */\n    getDiv() {\n        return this.label;\n    }\n}\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, 'toolboxlabel', ToolboxLabel);\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, Blockly.ToolboxCategory.registrationName, CustomCategory, true);\n"],"names":["toolbox","options","collapse","comments","disable","maxBlocks","Infinity","trashcan","horizontalLayout","toolboxPosition","css","media","rtl","scrollbars","sounds","oneBasedIndex","grid","spacing","length","colour","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","nextblocksWorkspace","init","contents","loadedSave","blocklyDiv","document","getElementById","blocklyArea","Blockly","inject","ResizeObserver","onResize","observe","tests","JSON","parse","inputs","forEach","input","i","inputName","Object","keys","createForcedInputBlock","addBlockToWorkspace","moveBy","loadSave","setupButtons","element","x","y","offsetLeft","offsetTop","offsetParent","style","left","top","width","offsetWidth","height","offsetHeight","svgResize","blockName","workspace","newBlock","initSvg","render","state","atob","serialization","workspaces","load","addEventListener","runCode","displayTestResults","saveState","save","stateB64","btoa","stringify","cmid","getCMID","classList","body","cmidClass","Array","from","find","className","startsWith","parseInt","split","prompt","Blocks","appendDummyInput","appendField","FieldTextInput","setOutput","setDeletable","setColour","setTooltip","setHelpUrl","javascript","javascriptGenerator","forBlock","block","generator","text","getFieldValue","JavaScript","ORDER_NONE","results","innerHTML","silentRunCode","code","eval","output","String","prototype","hideWrapperFunction","lines","this","splice","join","swapCase","newString","c","toUpperCase","toLowerCase","text_print","valueToCode","text_input","text_multiline_input","FieldMultilineInput","CustomCategory","ToolboxCategory","categoryDef","optParent","rowDiv_","backgroundColor","isSelected","labelDom","getElementsByClassName","color","colour_","iconDom_","utils","aria","setState","htmlDiv_","State","SELECTED","ToolboxLabel","ToolboxItem","toolboxItemDef","parentToolbox","label","createElement","textContent","toolboxItemDef_","name","registry","register","Type","TOOLBOX_ITEM","registrationName"],"mappings":"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"}