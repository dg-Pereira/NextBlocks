{"version":3,"file":"codeenv.min.js","sources":["../src/codeenv.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/codeenv\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\nlet toolbox = {\n    'kind': 'categoryToolbox',\n    'readOnly': true,\n    'contents': [\n        {\n            'kind': 'toolboxlabel',\n            'name': 'NextBlocks',\n            'colour': 'darkslategrey'\n        },\n        {\n            'kind': 'category',\n            'name': 'Logic',\n            'colour': '5b80a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa fa-cog',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'controls_if',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_compare',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_operation',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_boolean',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Math',\n            'colour': '5b67a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-plus-minus',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'math_number',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'math_arithmetic',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Text',\n            'colour': '5ba58c',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-font',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_print',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Variables',\n            'colour': 'a55b80',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-clipboard-list',\n            },\n            'custom': 'VARIABLE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Functions',\n            'colour': '995ba5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-code',\n            },\n            'custom': 'PROCEDURE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Input',\n            'colour': '180',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-keyboard',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_multiline_input',\n                },\n            ],\n        },\n    ],\n};\n\nconst options = {\n    toolbox: toolbox,\n    collapse: true,\n    comments: true,\n    disable: true,\n    maxBlocks: Infinity,\n    trashcan: true,\n    horizontalLayout: false,\n    toolboxPosition: 'start',\n    css: true,\n    media: 'https://blockly-demo.appspot.com/static/media/',\n    rtl: false,\n    scrollbars: true,\n    sounds: true,\n    oneBasedIndex: false,\n    grid: {\n        spacing: 20,\n        length: 1,\n        colour: '#888',\n        snap: false,\n    },\n    zoom: {\n        controls: true,\n        wheel: true,\n        startScale: 1,\n        maxScale: 3,\n        minScale: 0.3,\n        scaleSpeed: 1.2,\n    },\n};\n\n// GetMainWorkspace might remove need for global variable\nlet nextblocksWorkspace;\n\ndefine(['mod_nextblocks/lib', 'mod_nextblocks/repository'], function(lib, repository) {\n    /**\n     * @param {CodeString} code The Javascript code to be run\n     * Runs the code and displays the output in the output div\n     */\n    function runCode(code) {\n        const output = lib.silentRunCode(code.getCompleteCodeString());\n        // Replace newlines with <br /> so that they are displayed correctly\n        const outputHTML = output.replace(/\\n/g, \"<br />\");\n        const outputDiv = document.getElementById('output-div');\n        // Wrap the output in a div with max-height and overflow-y: auto to make it scrollable if too long (multiline input)\n        outputDiv.innerHTML = `<div style=\"max-height: 100%; overflow-y: auto;\"><pre>${outputHTML}</pre></div>`;\n    }\n\n    /**\n     * Saves the current state of the workspace to the database, for later retrieval and display\n     */\n    const saveState = () => {\n        const state = Blockly.serialization.workspaces.save(nextblocksWorkspace);\n        // eslint-disable-next-line no-unused-vars\n        const stateB64 = btoa(JSON.stringify(state));\n        // eslint-disable-next-line no-unused-vars\n        const cmid = getCMID();\n        repository.saveWorkspace(cmid, stateB64);\n    };\n\n    const submitWorkspace = () => {\n        const codeString = lib.getWorkspaceCode(nextblocksWorkspace, \"\").getSubmittableCodeString();\n        const state = Blockly.serialization.workspaces.save(nextblocksWorkspace);\n        const stateB64 = btoa(JSON.stringify(state));\n        const cmid = getCMID();\n        repository.submitWorkspace(cmid, stateB64, codeString);\n    };\n\n    /**\n     * @param {any[]} results The results of the tests\n     * @param {{}} tests The tests that were run\n     * @param {String[]} uncalledInputFuncs The names of the input functions that were not called in the code, if any\n     * Displays the results of the tests in the output div\n     */\n    function displayTestResults(results, tests, uncalledInputFuncs) {\n        const testResultsDiv = document.getElementById('output-div');\n        testResultsDiv.innerHTML = lib.testsAccordion(results, tests, uncalledInputFuncs);\n    }\n\n    /**\n     * @param {{}} tests The tests to be run\n     * @param {WorkspaceSvg} workspace The workspace to get the code from\n     * @param {string} inputFuncDecs\n     */\n    function setupButtons(tests, workspace, inputFuncDecs) {\n        // Listen for clicks on the run button\n        const runButton = document.getElementById('runButton');\n        runButton.addEventListener('click', function() {\n            // eslint-disable-next-line no-unused-vars\n            const code = lib.getWorkspaceCode(workspace, inputFuncDecs);\n            // Each function has 3 lines, so we divide by 3 to get the number of functions\n            // eslint-disable-next-line no-unused-vars\n            const inputFuncDecsCount = inputFuncDecs.split('\\n').length / 3;\n            lib.replaceCode(code, inputFuncDecsCount);\n            runCode(code);\n        });\n\n        if (tests !== null) {\n            // Listen for clicks on the run tests button\n            const runTestsButton = document.getElementById('runTestsButton');\n            runTestsButton.addEventListener('click', () => { // Needs anonymous function wrap to pass argument\n                const code = lib.getWorkspaceCode(workspace, inputFuncDecs).getCompleteCodeString();\n                const uncalledInputFuncs = lib.getMissingInputCalls(code, inputFuncDecs);\n                let results;\n                // If not all input functions are called, automatically fails all tests\n                if (uncalledInputFuncs.length > 0) {\n                    results = null;\n                } else {\n                    results = lib.runTests(code, tests);\n                }\n                displayTestResults(results, tests, uncalledInputFuncs);\n            });\n        }\n\n        // Listen for clicks on the save button\n        const saveButton = document.getElementById('saveButton');\n        saveButton.addEventListener('click', saveState);\n\n        // Listen for clicks on the submit button\n        const submitButton = document.getElementById('submitButton');\n        submitButton.addEventListener('click', submitWorkspace);\n    }\n\n    return {\n        /**\n         * @param {String} contents The contents of the tests file\n         * @param {String} loadedSave The contents of the loaded save, in a base64-encoded JSON string\n         * @param {{}} customBlocks The custom blocks to be added to the toolbox, created by the exercise creator\n         */\n        init: function(contents, loadedSave, customBlocks) {\n            const blocklyDiv = document.getElementById('blocklyDiv');\n            const blocklyArea = document.getElementById('blocklyArea');\n\n            // If there are custom blocks, add a new category to the toolbox\n            if (customBlocks.length > 0) {\n                toolbox.contents.push({\n                    'kind': 'category',\n                    'name': 'Custom Blocks',\n                    'colour': 'a55b80',\n                    \"cssConfig\": {\n                        'icon': 'customIcon fa-solid fa-code',\n                    },\n                    'contents': [],\n                });\n            }\n\n            // eslint-disable-next-line no-console\n            console.log(customBlocks);\n            customBlocks.forEach((block) => {\n                let splitTest = block.generator.split(\"forBlock['\");\n                let dotCase = false;\n                if (splitTest.length < 2) {\n                    splitTest = block.generator.split(\"forBlock.\");\n                    if (splitTest.length < 2) {\n                        throw new Error(\"Invalid generator\");\n                    }\n                    dotCase = true;\n                }\n                const blockName = splitTest[1].split(dotCase ? \" = \" : \"']\")[0].trim();\n                // Add block to toolbox\n                toolbox.contents[toolbox.contents.length - 1].contents.push({\n                    'kind': 'block',\n                    'type': blockName,\n                });\n\n                // eslint-disable-next-line no-eval\n                eval(block.definition);\n                // eslint-disable-next-line no-eval\n                eval(block.generator);\n            });\n\n            nextblocksWorkspace = Blockly.inject(blocklyDiv, options);\n            javascript.javascriptGenerator.init(nextblocksWorkspace);\n\n            // Use resize observer instead of window resize event. This captures both window resize and element resize\n            const resizeObserver = new ResizeObserver(() => onResize(blocklyArea, blocklyDiv, nextblocksWorkspace));\n            resizeObserver.observe(blocklyArea);\n\n            // Parse json from contents\n            const tests = JSON.parse(contents);\n            let inputFunctionDeclarations = {funcDecs: \"\"};\n\n            if (tests !== null) {\n                // Create forced input blocks from tests file. Only add to workspace if there is no workspace to load. If there\n                // was a workspace to load, they would be added twice.\n                const inputs = tests[0].inputs;\n\n                inputs.forEach((input, i) => {\n                    const inputName = Object.keys(input)[0];\n                    createForcedInputBlock(inputName, inputFunctionDeclarations); // Doesn't add block to workspace, just\n                                                                                  // defines it. Needed for save loading\n\n                    if (loadedSave === null) { // Only add to workspace if there is no workspace to load\n                        const blockName = \"forced_input_\" + inputName;\n                        let newBlock = addBlockToWorkspace(blockName, nextblocksWorkspace);\n                        newBlock.moveBy(0, i * 50); // Move block down a bit so that they don't overlap\n                    }\n                });\n            }\n\n            // Load the save, if there is one\n            if (loadedSave !== null) {\n                loadSave(loadedSave, nextblocksWorkspace);\n            } else {\n                addBlockToWorkspace('start', nextblocksWorkspace);\n            }\n\n            setupButtons(tests, nextblocksWorkspace, inputFunctionDeclarations.funcDecs);\n        }\n    };\n});\n\nconst onResize = function(blocklyArea, blocklyDiv, nextblocksWorkspace) {\n    // Compute the absolute coordinates and dimensions of blocklyArea.\n    let element = blocklyArea;\n    let x = 0;\n    let y = 0;\n    do {\n        x += element.offsetLeft;\n        y += element.offsetTop;\n        element = element.offsetParent;\n    } while (element);\n    // Position blocklyDiv over blocklyArea.\n    blocklyDiv.style.left = x + 'px';\n    blocklyDiv.style.top = y + 'px';\n    blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';\n    blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';\n    Blockly.svgResize(nextblocksWorkspace);\n};\n\n/**\n * @param {String} blockName The name of the input block to be added (prompt on the left side of the block\n * @param {WorkspaceSvg} workspace The workspace to add the input block to\n * @returns {BlockSvg} The newly created block\n */\nfunction addBlockToWorkspace(blockName, workspace) {\n    const newBlock = workspace.newBlock(blockName);\n    newBlock.initSvg();\n    newBlock.render();\n    return newBlock;\n}\n\n/**\n * @param {String} loadedSave\n * @param {WorkspaceSvg} workspace\n */\nfunction loadSave(loadedSave, workspace) {\n    const state = JSON.parse(atob(loadedSave));\n    Blockly.serialization.workspaces.load(state, workspace);\n}\n\n/**\n * @returns {Number} The course module id of the current page\n */\nfunction getCMID() {\n    const classList = document.body.classList;\n    const cmidClass = Array.from(classList).find((className) => className.startsWith('cmid-'));\n    return parseInt(cmidClass.split('-')[1]);\n}\n\n/**\n * @param {string} prompt The name of the input block to be added (prompt on the left side of the block)\n * @param {object} inputFunctionDeclarations Contains the string containing the function declarations for the input\n * blocks, to be added to the top of the code. Is an object so that it is passed by reference.\n */\nfunction createForcedInputBlock(prompt, inputFunctionDeclarations) {\n    const blockName = \"forced_input_\" + prompt;\n    Blockly.Blocks[blockName] = {\n        init: function() {\n            this.appendDummyInput()\n                .appendField(prompt)\n                .appendField(new Blockly.FieldTextInput('text'), prompt);\n            this.setOutput(true, \"String\");\n            this.setDeletable(false);\n            this.setColour(180);\n            this.setTooltip(\"\");\n            this.setHelpUrl(\"\");\n        }\n    };\n\n    inputFunctionDeclarations.funcDecs += `function input${prompt}(string) {\\n   return string;\\n}\\n`;\n    javascript.javascriptGenerator.addReservedWords(`input${prompt}`);\n\n    // eslint-disable-next-line no-unused-vars\n    javascript.javascriptGenerator.forBlock[blockName] = function(block, generator) {\n        const text = block.getFieldValue(prompt);\n        let blockCode = `input${prompt}('${text}')`;\n        return [blockCode, Blockly.JavaScript.ORDER_NONE];\n    };\n}\n\n// eslint-disable-next-line no-extend-native\nString.prototype.hideWrapperFunction = function() {\n    const lines = this.split('\\n');\n    lines.splice(0, 2); // Remove the first two lines\n    return lines.join('\\n');\n};\n\n// Redefine the text_print block to use the outputString variable instead of alert.\njavascript.javascriptGenerator.forBlock.text_print = function(block, generator) {\n    return (\n        \"print(\" +\n        (generator.valueToCode(\n            block,\n            \"TEXT\",\n            Blockly.JavaScript.ORDER_NONE\n        ) || \"''\") +\n        \");\\n\"\n    );\n};\n\nBlockly.Blocks.text_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"text input:\")\n            .appendField(new Blockly.FieldTextInput('text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_multiline_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"multiline text input:\")\n            .appendField(new Blockly.FieldMultilineInput('multiline \\n text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.start = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"start\");\n        this.setNextStatement(true, null);\n        this.setColour(60);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n        this.setDeletable(false);\n    }\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.start = function(block, generator) {\n    // TODO: Assemble javascript into code variable.\n    // get all blocks attached to this block\n    let code = '';\n    return code;\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = 'input(\"' + text + '\")';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_multiline_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = \"input(`\" + text + \"`)\";\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\nclass CustomCategory extends Blockly.ToolboxCategory {\n    /**\n     * Constructor for a custom category.\n     * @override\n     */\n    constructor(categoryDef, toolbox, optParent) {\n        super(categoryDef, toolbox, optParent);\n    }\n\n    /** @override */\n    addColourBorder_(colour) {\n        this.rowDiv_.style.backgroundColor = colour;\n    }\n\n    /** @override */\n    setSelected(isSelected) {\n        // We do not store the label span on the category, so use getElementsByClassName.\n        var labelDom = this.rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n        if (isSelected) {\n            // Change the background color of the div to white.\n            this.rowDiv_.style.backgroundColor = 'white';\n            // Set the colour of the text to the colour of the category.\n            labelDom.style.color = this.colour_;\n            this.iconDom_.style.color = this.colour_;\n        } else {\n            // Set the background back to the original colour.\n            this.rowDiv_.style.backgroundColor = this.colour_;\n            // Set the text back to white.\n            labelDom.style.color = 'white';\n            this.iconDom_.style.color = 'white';\n        }\n        // This is used for accessibility purposes.\n        Blockly.utils.aria.setState(/** @type {!Element} */ (this.htmlDiv_),\n            Blockly.utils.aria.State.SELECTED, isSelected);\n    }\n}\n\nclass ToolboxLabel extends Blockly.ToolboxItem {\n    constructor(toolboxItemDef, parentToolbox) {\n        super(toolboxItemDef, parentToolbox);\n    }\n\n    /** @override */\n    init() {\n        // Create the label.\n        this.label = document.createElement('label');\n\n        // Set the name.\n        this.label.textContent = this.toolboxItemDef_.name;\n        // Set the color.\n        this.label.style.color = this.toolboxItemDef_.colour;\n    }\n\n    /** @override */\n    getDiv() {\n        return this.label;\n    }\n}\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, 'toolboxlabel', ToolboxLabel);\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, Blockly.ToolboxCategory.registrationName, CustomCategory, true);\n"],"names":["toolbox","options","collapse","comments","disable","maxBlocks","Infinity","trashcan","horizontalLayout","toolboxPosition","css","media","rtl","scrollbars","sounds","oneBasedIndex","grid","spacing","length","colour","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","nextblocksWorkspace","define","lib","repository","runCode","code","outputHTML","silentRunCode","getCompleteCodeString","replace","document","getElementById","innerHTML","saveState","state","Blockly","serialization","workspaces","save","stateB64","btoa","JSON","stringify","cmid","getCMID","saveWorkspace","submitWorkspace","codeString","getWorkspaceCode","getSubmittableCodeString","displayTestResults","results","tests","uncalledInputFuncs","testsAccordion","setupButtons","workspace","inputFuncDecs","addEventListener","inputFuncDecsCount","split","replaceCode","getMissingInputCalls","runTests","init","contents","loadedSave","customBlocks","blocklyDiv","blocklyArea","push","console","log","forEach","block","splitTest","generator","dotCase","Error","blockName","trim","eval","definition","inject","javascript","javascriptGenerator","resizeObserver","ResizeObserver","onResize","observe","parse","inputFunctionDeclarations","funcDecs","inputs","input","i","inputName","Object","keys","createForcedInputBlock","addBlockToWorkspace","moveBy","loadSave","element","x","y","offsetLeft","offsetTop","offsetParent","style","left","top","width","offsetWidth","height","offsetHeight","svgResize","newBlock","initSvg","render","atob","load","classList","body","cmidClass","Array","from","find","className","startsWith","parseInt","prompt","Blocks","appendDummyInput","appendField","FieldTextInput","setOutput","setDeletable","setColour","setTooltip","setHelpUrl","addReservedWords","forBlock","text","getFieldValue","JavaScript","ORDER_NONE","String","prototype","hideWrapperFunction","lines","this","splice","join","text_print","valueToCode","text_input","text_multiline_input","FieldMultilineInput","start","setNextStatement","CustomCategory","ToolboxCategory","categoryDef","optParent","rowDiv_","backgroundColor","isSelected","labelDom","getElementsByClassName","color","colour_","iconDom_","utils","aria","setState","htmlDiv_","State","SELECTED","ToolboxLabel","ToolboxItem","toolboxItemDef","parentToolbox","label","createElement","textContent","toolboxItemDef_","name","registry","register","Type","TOOLBOX_ITEM","registrationName"],"mappings":";;;;;;GAWA,IAAIA,QAAU,MACF,4BACI,WACA,CACR,MACY,oBACA,oBACE,iBAEd,MACY,gBACA,eACE,mBACG,MACD,iCAEA,CACR,MACY,aACA,eAEZ,MACY,aACA,iBAEZ,MACY,aACA,mBAEZ,MACY,aACA,mBAIpB,MACY,gBACA,cACE,mBACG,MACD,8CAEA,CACR,MACY,aACA,eAEZ,MACY,aACA,qBAIpB,MACY,gBACA,cACE,mBACG,MACD,wCAEA,CACR,MACY,aACA,QAEZ,MACY,aACA,gBAIpB,MACY,gBACA,mBACE,mBACG,MACD,gDAEF,YAEd,MACY,gBACA,mBACE,mBACG,MACD,sCAEF,aAEd,MACY,gBACA,eACE,gBACG,MACD,4CAEA,CACR,MACY,aACA,cAEZ,MACY,aACA,4BAOtBC,QAAU,CACZD,QAASA,QACTE,UAAU,EACVC,UAAU,EACVC,SAAS,EACTC,UAAWC,EAAAA,EACXC,UAAU,EACVC,kBAAkB,EAClBC,gBAAiB,QACjBC,KAAK,EACLC,MAAO,iDACPC,KAAK,EACLC,YAAY,EACZC,QAAQ,EACRC,eAAe,EACfC,KAAM,CACFC,QAAS,GACTC,OAAQ,EACRC,OAAQ,OACRC,MAAM,GAEVC,KAAM,CACFC,UAAU,EACVC,OAAO,EACPC,WAAY,EACZC,SAAU,EACVC,SAAU,GACVC,WAAY,MAKhBC,oBAEJC,gCAAO,CAAC,qBAAsB,8BAA8B,SAASC,IAAKC,qBAK7DC,QAAQC,UAGPC,WAFSJ,IAAIK,cAAcF,KAAKG,yBAEZC,QAAQ,MAAO,UACvBC,SAASC,eAAe,cAEhCC,0EAAqEN,+BAM7EO,UAAY,eACRC,MAAQC,QAAQC,cAAcC,WAAWC,KAAKlB,qBAE9CmB,SAAWC,KAAKC,KAAKC,UAAUR,QAE/BS,KAAOC,UACbrB,WAAWsB,cAAcF,KAAMJ,WAG7BO,gBAAkB,eACdC,WAAazB,IAAI0B,iBAAiB5B,oBAAqB,IAAI6B,2BAC3Df,MAAQC,QAAQC,cAAcC,WAAWC,KAAKlB,qBAC9CmB,SAAWC,KAAKC,KAAKC,UAAUR,QAC/BS,KAAOC,UACbrB,WAAWuB,gBAAgBH,KAAMJ,SAAUQ,sBAStCG,mBAAmBC,QAASC,MAAOC,oBACjBvB,SAASC,eAAe,cAChCC,UAAYV,IAAIgC,eAAeH,QAASC,MAAOC,6BAQzDE,aAAaH,MAAOI,UAAWC,gBAElB3B,SAASC,eAAe,aAChC2B,iBAAiB,SAAS,eAE1BjC,KAAOH,IAAI0B,iBAAiBQ,UAAWC,eAGvCE,mBAAqBF,cAAcG,MAAM,MAAMlD,OAAS,EAC9DY,IAAIuC,YAAYpC,KAAMkC,oBACtBnC,QAAQC,SAGE,OAAV2B,QAEuBtB,SAASC,eAAe,kBAChC2B,iBAAiB,SAAS,eAC/BjC,KAAOH,IAAI0B,iBAAiBQ,UAAWC,eAAe7B,wBACtDyB,mBAAqB/B,IAAIwC,qBAAqBrC,KAAMgC,eAQ1DP,mBALIG,mBAAmB3C,OAAS,EAClB,KAEAY,IAAIyC,SAAStC,KAAM2B,OAELA,MAAOC,uBAKxBvB,SAASC,eAAe,cAChC2B,iBAAiB,QAASzB,WAGhBH,SAASC,eAAe,gBAChC2B,iBAAiB,QAASZ,uBAGpC,CAMHkB,KAAM,cAASC,SAAUC,WAAYC,kBAC3BC,WAAatC,SAASC,eAAe,cACrCsC,YAAcvC,SAASC,eAAe,eAGxCoC,aAAazD,OAAS,GACtBlB,QAAQyE,SAASK,KAAK,MACV,gBACA,uBACE,mBACG,MACD,wCAEA,KAKpBC,QAAQC,IAAIL,cACZA,aAAaM,SAAQ,SAACC,WACdC,UAAYD,MAAME,UAAUhB,MAAM,cAClCiB,SAAU,KACVF,UAAUjE,OAAS,EAAG,IACtBiE,UAAYD,MAAME,UAAUhB,MAAM,aAC9Be,UAAUjE,OAAS,QACb,IAAIoE,MAAM,qBAEpBD,SAAU,MAERE,UAAYJ,UAAU,GAAGf,MAAMiB,QAAU,MAAQ,MAAM,GAAGG,OAEhExF,QAAQyE,SAASzE,QAAQyE,SAASvD,OAAS,GAAGuD,SAASK,KAAK,MAChD,aACAS,YAIZE,KAAKP,MAAMQ,YAEXD,KAAKP,MAAME,cAGfxD,oBAAsBe,QAAQgD,OAAOf,WAAY3E,SACjD2F,WAAWC,oBAAoBrB,KAAK5C,yBAG9BkE,eAAiB,IAAIC,gBAAe,kBAAMC,SAASnB,YAAaD,WAAYhD,wBAClFkE,eAAeG,QAAQpB,iBAGjBjB,MAAQX,KAAKiD,MAAMzB,UACrB0B,0BAA4B,CAACC,SAAU,OAE7B,OAAVxC,MAAgB,KAGVyC,OAASzC,MAAM,GAAGyC,OAExBA,OAAOpB,SAAQ,SAACqB,MAAOC,OACbC,UAAYC,OAAOC,KAAKJ,OAAO,IACrCK,uBAAuBH,UAAWL,2BAGf,OAAfzB,aAEekC,oBADG,gBAAkBJ,UACU5E,qBACrCiF,OAAO,EAAO,GAAJN,MAMZ,OAAf7B,WACAoC,SAASpC,WAAY9C,qBAErBgF,oBAAoB,QAAShF,qBAGjCmC,aAAaH,MAAOhC,oBAAqBuE,0BAA0BC,eAK/E,IAAMJ,SAAW,SAASnB,YAAaD,WAAYhD,yBAE3CmF,QAAUlC,YACVmC,EAAI,EACJC,EAAI,KAEJD,GAAKD,QAAQG,WACbD,GAAKF,QAAQI,UACbJ,QAAUA,QAAQK,mBACbL,SAETnC,WAAWyC,MAAMC,KAAON,EAAI,KAC5BpC,WAAWyC,MAAME,IAAMN,EAAI,KAC3BrC,WAAWyC,MAAMG,MAAQ3C,YAAY4C,YAAc,KACnD7C,WAAWyC,MAAMK,OAAS7C,YAAY8C,aAAe,KACrDhF,QAAQiF,UAAUhG,sBAQtB,SAASgF,oBAAoBrB,UAAWvB,eAC9B6D,SAAW7D,UAAU6D,SAAStC,kBACpCsC,SAASC,UACTD,SAASE,SACFF,SAOX,SAASf,SAASpC,WAAYV,eACpBtB,MAAQO,KAAKiD,MAAM8B,KAAKtD,aAC9B/B,QAAQC,cAAcC,WAAWoF,KAAKvF,MAAOsB,WAMjD,SAASZ,cACC8E,UAAY5F,SAAS6F,KAAKD,UAC1BE,UAAYC,MAAMC,KAAKJ,WAAWK,MAAK,SAACC,kBAAcA,UAAUC,WAAW,mBAC1EC,SAASN,UAAUhE,MAAM,KAAK,IAQzC,SAASuC,uBAAuBgC,OAAQxC,+BAC9BZ,UAAY,gBAAkBoD,OACpChG,QAAQiG,OAAOrD,WAAa,CACxBf,KAAM,gBACGqE,mBACAC,YAAYH,QACZG,YAAY,IAAInG,QAAQoG,eAAe,QAASJ,aAChDK,WAAU,EAAM,eAChBC,cAAa,QACbC,UAAU,UACVC,WAAW,SACXC,WAAW,MAIxBjD,0BAA0BC,kCAA6BuC,6CACvD/C,WAAWC,oBAAoBwD,gCAAyBV,SAGxD/C,WAAWC,oBAAoByD,SAAS/D,WAAa,SAASL,MAAOE,eAC3DmE,KAAOrE,MAAMsE,cAAcb,cAE1B,gBADiBA,oBAAWY,WAChB5G,QAAQ8G,WAAWC,aAK9CC,OAAOC,UAAUC,oBAAsB,eAC7BC,MAAQC,KAAK3F,MAAM,aACzB0F,MAAME,OAAO,EAAG,GACTF,MAAMG,KAAK,OAItBrE,WAAWC,oBAAoByD,SAASY,WAAa,SAAShF,MAAOE,iBAE7D,UACCA,UAAU+E,YACPjF,MACA,OACAvC,QAAQ8G,WAAWC,aAClB,MACL,QAIR/G,QAAQiG,OAAOwB,WAAa,CACxB5F,KAAM,gBACGqE,mBACAC,YAAY,eACZA,YAAY,IAAInG,QAAQoG,eAAe,QACpC,mBACHC,WAAU,EAAM,eAChBE,UAAU,UACVC,WAAW,SACXC,WAAW,MAIxBzG,QAAQiG,OAAOyB,qBAAuB,CAClC7F,KAAM,gBACGqE,mBACAC,YAAY,yBACZA,YAAY,IAAInG,QAAQ2H,oBAAoB,qBACzC,mBACHtB,WAAU,EAAM,eAChBE,UAAU,UACVC,WAAW,SACXC,WAAW,MAIxBzG,QAAQiG,OAAO2B,MAAQ,CACnB/F,KAAM,gBACGqE,mBACAC,YAAY,cACZ0B,kBAAiB,EAAM,WACvBtB,UAAU,SACVC,WAAW,SACXC,WAAW,SACXH,cAAa,KAK1BrD,WAAWC,oBAAoByD,SAASiB,MAAQ,SAASrF,MAAOE,iBAGjD,IAKfQ,WAAWC,oBAAoByD,SAASc,WAAa,SAASlF,MAAOE,iBAG1D,CADI,UADEF,MAAMsE,cAAc,cACH,KAChB7G,QAAQ8G,WAAWC,aAIrC9D,WAAWC,oBAAoByD,SAASe,qBAAuB,SAASnF,MAAOE,iBAGpE,CADI,UADEF,MAAMsE,cAAc,cACH,KAChB7G,QAAQ8G,WAAWC,iBAG/Be,wEAAuB9H,QAAQ+H,iFAKrBC,YAAa3K,QAAS4K,wEACxBD,YAAa3K,QAAS4K,6EAIhC,SAAiBzJ,aACR0J,QAAQxD,MAAMyD,gBAAkB3J,kCAIzC,SAAY4J,gBAEJC,SAAWjB,KAAKc,QAAQI,uBAAuB,oBAAoB,GACnEF,iBAEKF,QAAQxD,MAAMyD,gBAAkB,QAErCE,SAAS3D,MAAM6D,MAAQnB,KAAKoB,aACvBC,SAAS/D,MAAM6D,MAAQnB,KAAKoB,eAG5BN,QAAQxD,MAAMyD,gBAAkBf,KAAKoB,QAE1CH,SAAS3D,MAAM6D,MAAQ,aAClBE,SAAS/D,MAAM6D,MAAQ,SAGhCvI,QAAQ0I,MAAMC,KAAKC,SAAkCxB,KAAKyB,SACtD7I,QAAQ0I,MAAMC,KAAKG,MAAMC,SAAUX,kCAIzCY,mEAAqBhJ,QAAQiJ,0EACnBC,eAAgBC,2EAClBD,eAAgBC,mEAI1B,gBAESC,MAAQzJ,SAAS0J,cAAc,cAG/BD,MAAME,YAAclC,KAAKmC,gBAAgBC,UAEzCJ,MAAM1E,MAAM6D,MAAQnB,KAAKmC,gBAAgB/K,6BAIlD,kBACW4I,KAAKgC,0BAIpBpJ,QAAQyJ,SAASC,SAAS1J,QAAQyJ,SAASE,KAAKC,aAAc,eAAgBZ,cAE9EhJ,QAAQyJ,SAASC,SAAS1J,QAAQyJ,SAASE,KAAKC,aAAc5J,QAAQ+H,gBAAgB8B,iBAAkB/B,gBAAgB"}