{"version":3,"file":"codeenv.min.js","sources":["../src/codeenv.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/env\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\nimport {getWorkspaceCode, parseTestsFile, replaceCode, runTests} from \"./lib\";\n\nconst toolbox = {\n    'kind': 'categoryToolbox',\n    'readOnly': true,\n    'contents': [\n        {\n            'kind': 'toolboxlabel',\n            'name': 'NextBlocks',\n            'colour': 'darkslategrey'\n        },\n        {\n            'kind': 'category',\n            'name': 'Logic',\n            'colour': '5b80a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa fa-cog',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'controls_if',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_compare',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_operation',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_boolean',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Math',\n            'colour': '5b67a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-plus-minus',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'math_number',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'math_arithmetic',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Text',\n            'colour': '5ba58c',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-font',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_print',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Variables',\n            'colour': 'a55b80',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-clipboard-list',\n            },\n            'custom': 'VARIABLE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Functions',\n            'colour': '995ba5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-code',\n            },\n            'custom': 'PROCEDURE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Input',\n            'colour': '180',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-keyboard',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_multiline_input',\n                },\n            ],\n        },\n    ],\n};\n\nconst options = {\n    toolbox: toolbox,\n    collapse: true,\n    comments: true,\n    disable: true,\n    maxBlocks: Infinity,\n    trashcan: true,\n    horizontalLayout: false,\n    toolboxPosition: 'start',\n    css: true,\n    media: 'https://blockly-demo.appspot.com/static/media/',\n    rtl: false,\n    scrollbars: true,\n    sounds: true,\n    oneBasedIndex: false,\n    grid: {\n        spacing: 20,\n        length: 1,\n        colour: '#888',\n        snap: false,\n    },\n    zoom: {\n        controls: true,\n        wheel: true,\n        startScale: 1,\n        maxScale: 3,\n        minScale: 0.3,\n        scaleSpeed: 1.2,\n    },\n};\n\nlet workspace;\n\nexport const init = (contents) => {\n    workspace = Blockly.inject('blocklyDiv', options);\n    // eslint-disable-next-line no-unused-vars\n    const tests = parseTestsFile(contents);\n\n    addInputBlocks(tests);\n\n    const runButton = document.getElementById('runButton');\n    runButton.addEventListener('click', function() {\n        const code = getWorkspaceCode(workspace);\n        runCode(code);\n    });\n\n    if (contents !== '') {\n        runTestsHandler(tests);\n    }\n};\n\n/**\n * @param {{}} tests\n * Adds the input blocks to the workspace\n */\nfunction addInputBlocks(tests) {\n    const test = tests[0];\n    const inputs = test.inputs;\n    const addedBlocks = [];\n\n    // Add a block for each input\n    inputs.forEach((input) => {\n        const inputName = Object.keys(input)[0];\n        addedBlocks.push(createForcedInputBlock(inputName));\n    });\n    // Move the blocks down so they don't overlap\n    addedBlocks.forEach((block, i) => {\n        block.moveBy(0, i * 50);\n    });\n}\n\n/**\n * @param {String} prompt\n * @returns {Blockly.BlockSvg} The block that was created\n */\nfunction createForcedInputBlock(prompt) {\n    const blockName = \"forced_input_\" + prompt;\n    Blockly.Blocks[blockName] = {\n        init: function () {\n            this.appendDummyInput()\n                .appendField(prompt)\n                .appendField(new Blockly.FieldTextInput('text'), prompt);\n            this.setOutput(true, \"String\");\n            this.setDeletable(false);\n            this.setColour(180);\n            this.setTooltip(\"\");\n            this.setHelpUrl(\"\");\n        }\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    javascript.javascriptGenerator.forBlock[blockName] = function (block, generator) {\n        const text = block.getFieldValue(prompt);\n        //let code = '\"' + text + '\"';\n        let code = '(function () { let ' + prompt + ' = \"' + text + '\"; return ' + prompt + ';})()';\n        return [code, Blockly.JavaScript.ORDER_NONE];\n    };\n\n    const newBlock = workspace.newBlock(blockName);\n    newBlock.initSvg();\n    newBlock.render();\n\n    return newBlock;\n}\n\n/**\n * @param {{}} tests the contents of the tests file\n */\nfunction runTestsHandler(tests) {\n    // Listen for clicks on the run tests button\n    const runTestsButton = document.getElementById('runTestsButton');\n    runTestsButton.addEventListener('click', () => { // Needs anonymous function wrap to pass argument\n        const results = runTests(workspace, tests);\n        displayTestResults(results);\n    });\n}\n\n/**\n * @param {Boolean[]} results\n */\nfunction displayTestResults(results) {\n    const testResultsDiv = document.getElementById('testResultsDiv');\n    testResultsDiv.innerHTML = '';\n    results.forEach((result, i) => {\n        const testResult = document.createElement('p');\n        testResult.innerHTML = 'Test ' + (i + 1) + ': ' + (result ? 'Passed' : 'Failed');\n        testResultsDiv.appendChild(testResult);\n    });\n}\n\n/**\n * @param {String} code The Javascript code to be run\n * @returns {*} The output of the code\n * Runs the code and returns the output, does not display it\n */\nfunction silentRunCode(code) {\n    replaceCode(code);\n    // eslint-disable-next-line no-eval\n    return eval(code);\n}\n\n/**\n * @param {String} code The Javascript code to be run\n * Runs the code and displays the output in the output div\n */\nfunction runCode(code) {\n    // eslint-disable-next-line no-eval,no-console\n    const output = silentRunCode(code);\n\n    const outputDiv = document.getElementById('outputDiv');\n    outputDiv.innerHTML += output;\n}\n\n// eslint-disable-next-line no-unused-vars\n// Redefine the text_print block to use the outputString variable instead of alert.\njavascript.javascriptGenerator.forBlock.text_print = function(block, generator) {\n    return (\n        \"outputString += \" +\n        (generator.valueToCode(\n            block,\n            \"TEXT\",\n            Blockly.JavaScript.ORDER_NONE\n        ) || \"''\") +\n        \";\\n\"\n    );\n};\n\nBlockly.Blocks.text_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"text input:\")\n            .appendField(new Blockly.FieldTextInput('text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_multiline_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"multiline text input:\")\n            .appendField(new Blockly.FieldMultilineInput('multiline \\n text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = '\"' + text + '\"';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_multiline_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = \"`\" + text + \"`\";\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\nclass CustomCategory extends Blockly.ToolboxCategory {\n    /**\n     * Constructor for a custom category.\n     * @override\n     */\n    constructor(categoryDef, toolbox, optParent) {\n        super(categoryDef, toolbox, optParent);\n    }\n\n    /** @override */\n    addColourBorder_(colour){\n        this.rowDiv_.style.backgroundColor = colour;\n    }\n\n    /** @override */\n    setSelected(isSelected) {\n        // We do not store the label span on the category, so use getElementsByClassName.\n        var labelDom = this.rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n        if (isSelected) {\n            // Change the background color of the div to white.\n            this.rowDiv_.style.backgroundColor = 'white';\n            // Set the colour of the text to the colour of the category.\n            labelDom.style.color = this.colour_;\n            this.iconDom_.style.color = this.colour_;\n        } else {\n            // Set the background back to the original colour.\n            this.rowDiv_.style.backgroundColor = this.colour_;\n            // Set the text back to white.\n            labelDom.style.color = 'white';\n            this.iconDom_.style.color = 'white';\n        }\n        // This is used for accessibility purposes.\n        Blockly.utils.aria.setState(/** @type {!Element} */ (this.htmlDiv_),\n            Blockly.utils.aria.State.SELECTED, isSelected);\n    }\n}\n\nclass ToolboxLabel extends Blockly.ToolboxItem {\n    constructor(toolboxItemDef, parentToolbox) {\n        super(toolboxItemDef, parentToolbox);\n    }\n\n    /** @override */\n    init() {\n        // Create the label.\n        this.label = document.createElement('label');\n\n        // Set the name.\n        this.label.textContent = this.toolboxItemDef_.name;\n        // Set the color.\n        this.label.style.color = this.toolboxItemDef_.colour;\n    }\n\n    /** @override */\n    getDiv() {\n        return this.label;\n    }\n}\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, 'toolboxlabel', ToolboxLabel);\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, Blockly.ToolboxCategory.registrationName, CustomCategory, true);\n"],"names":["toolbox","options","collapse","comments","disable","maxBlocks","Infinity","trashcan","horizontalLayout","toolboxPosition","css","media","rtl","scrollbars","sounds","oneBasedIndex","grid","spacing","length","colour","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","workspace","init","contents","Blockly","inject","tests","addInputBlocks","document","getElementById","addEventListener","runCode","runTestsHandler","inputs","addedBlocks","forEach","input","inputName","Object","keys","push","createForcedInputBlock","block","i","moveBy","prompt","blockName","Blocks","appendDummyInput","appendField","FieldTextInput","setOutput","setDeletable","setColour","setTooltip","setHelpUrl","javascript","javascriptGenerator","forBlock","generator","text","getFieldValue","JavaScript","ORDER_NONE","newBlock","initSvg","render","displayTestResults","results","testResultsDiv","innerHTML","result","testResult","createElement","appendChild","silentRunCode","code","eval","output","text_print","valueToCode","text_input","text_multiline_input","FieldMultilineInput","CustomCategory","ToolboxCategory","categoryDef","optParent","rowDiv_","style","backgroundColor","isSelected","labelDom","this","getElementsByClassName","color","colour_","iconDom_","utils","aria","setState","htmlDiv_","State","SELECTED","ToolboxLabel","ToolboxItem","toolboxItemDef","parentToolbox","label","textContent","toolboxItemDef_","name","registry","register","Type","TOOLBOX_ITEM","registrationName"],"mappings":"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"}