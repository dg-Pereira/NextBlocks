{"version":3,"file":"codeenv.min.js","sources":["../src/codeenv.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/env\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\nimport {getWorkspaceCode, parseTestsFile, replaceCode, runTests} from \"./lib\";\nimport {saveWorkspace} from \"./repository\";\n\nconst toolbox = {\n    'kind': 'categoryToolbox',\n    'readOnly': true,\n    'contents': [\n        {\n            'kind': 'toolboxlabel',\n            'name': 'NextBlocks',\n            'colour': 'darkslategrey'\n        },\n        {\n            'kind': 'category',\n            'name': 'Logic',\n            'colour': '5b80a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa fa-cog',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'controls_if',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_compare',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_operation',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_boolean',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Math',\n            'colour': '5b67a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-plus-minus',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'math_number',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'math_arithmetic',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Text',\n            'colour': '5ba58c',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-font',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_print',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Variables',\n            'colour': 'a55b80',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-clipboard-list',\n            },\n            'custom': 'VARIABLE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Functions',\n            'colour': '995ba5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-code',\n            },\n            'custom': 'PROCEDURE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Input',\n            'colour': '180',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-keyboard',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_multiline_input',\n                },\n            ],\n        },\n    ],\n};\n\nconst options = {\n    toolbox: toolbox,\n    collapse: true,\n    comments: true,\n    disable: true,\n    maxBlocks: Infinity,\n    trashcan: true,\n    horizontalLayout: false,\n    toolboxPosition: 'start',\n    css: true,\n    media: 'https://blockly-demo.appspot.com/static/media/',\n    rtl: false,\n    scrollbars: true,\n    sounds: true,\n    oneBasedIndex: false,\n    grid: {\n        spacing: 20,\n        length: 1,\n        colour: '#888',\n        snap: false,\n    },\n    zoom: {\n        controls: true,\n        wheel: true,\n        startScale: 1,\n        maxScale: 3,\n        minScale: 0.3,\n        scaleSpeed: 1.2,\n    },\n};\n\n// getMainWorkspace might remove need for global variable\nlet nextblocksWorkspace;\n\n/**\n * @param {String} contents The contents of the tests file\n * @param {String} loadedSave The contents of the loaded save, in a base64-encoded JSON string\n */\nexport const init = (contents, loadedSave) => {\n    nextblocksWorkspace = Blockly.inject('blocklyDiv', options);\n\n    const tests = contents !== null ? parseTestsFile(contents) : null;\n\n    if (tests !== null) {\n        // Create forced input blocks from tests file. Only add to workspace if there is no workspace to load. If there\n        // was a workspace to load, they would be added twice.\n        const inputs = tests[0].inputs;\n        inputs.forEach((input, i) => {\n            const inputName = Object.keys(input)[0];\n            createForcedInputBlock(inputName); // Doesn't add block to workspace, just defines it. Needed for save loading\n\n            if (loadedSave === null) { // Only add to workspace if there is no workspace to load\n                const blockName = \"forced_input_\" + inputName;\n                let newBlock = addBlockToWorkspace(blockName, nextblocksWorkspace);\n                newBlock.moveBy(0, i * 50); // Move block down a bit so that they don't overlap\n            }\n        });\n    }\n\n    // Load the save, if there is one\n    if (loadedSave !== null) {\n        loadSave(loadedSave, nextblocksWorkspace);\n    }\n\n    setupButtons(tests, contents, nextblocksWorkspace);\n};\n\n/**\n * @param {String} blockName The name of the input block to be added (prompt on the left side of the block\n * @param {WorkspaceSvg} workspace The workspace to add the input block to\n * @returns {BlockSvg} The newly created block\n */\nfunction addBlockToWorkspace(blockName, workspace) {\n    const newBlock = workspace.newBlock(blockName);\n    newBlock.initSvg();\n    newBlock.render();\n    return newBlock;\n}\n\n/**\n * @param {String} loadedSave\n * @param {WorkspaceSvg} workspace\n */\nfunction loadSave(loadedSave, workspace) {\n    const state = JSON.parse(atob(loadedSave));\n    Blockly.serialization.workspaces.load(state, workspace);\n}\n\n/**\n * @param {{}} tests\n * @param {String} contents\n * @param {WorkspaceSvg} workspace\n */\nfunction setupButtons(tests, contents, workspace) {\n    // Listen for clicks on the run button\n    const runButton = document.getElementById('runButton');\n    runButton.addEventListener('click', function() {\n        const code = getWorkspaceCode(workspace);\n        runCode(code);\n    });\n\n    // Listen for clicks on the run tests button\n    if (contents !== '') {\n        const runTestsButton = document.getElementById('runTestsButton');\n        runTestsButton.addEventListener('click', () => { // Needs anonymous function wrap to pass argument\n            const results = runTests(workspace, tests);\n            displayTestResults(results);\n        });\n    }\n\n    // Listen for clicks on the save button\n    const saveButton = document.getElementById('saveButton');\n    saveButton.addEventListener('click', saveState);\n}\n\n/**\n * Saves the current state of the workspace to the database, for later retrieval and display\n */\nexport const saveState = async() => {\n    const state = Blockly.serialization.workspaces.save(nextblocksWorkspace);\n    const stateB64 = btoa(JSON.stringify(state));\n    const cmid = getCMID();\n    await saveWorkspace(cmid, stateB64);\n};\n\n/**\n *\n */\nfunction getCMID() {\n    const classList = document.body.classList;\n    const cmidClass = Array.from(classList).find((className) => className.startsWith('cmid-'));\n    return parseInt(cmidClass.split('-')[1]);\n}\n\n/**\n * @param {String} prompt\n */\nfunction createForcedInputBlock(prompt){\n    const blockName = \"forced_input_\" + prompt;\n    Blockly.Blocks[blockName] = {\n        init: function() {\n            this.appendDummyInput()\n                .appendField(prompt)\n                .appendField(new Blockly.FieldTextInput('text'), prompt);\n            this.setOutput(true, \"String\");\n            this.setDeletable(false);\n            this.setColour(180);\n            this.setTooltip(\"\");\n            this.setHelpUrl(\"\");\n        }\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    javascript.javascriptGenerator.forBlock[blockName] = function(block, generator) {\n        const text = block.getFieldValue(prompt);\n        let code = '(function () { let ' + prompt + ' = \"' + text + '\"; return ' + prompt + ';})()';\n        return [code, Blockly.JavaScript.ORDER_NONE];\n    };\n}\n\n/**\n * @param {Boolean[]} results\n */\nfunction displayTestResults(results) {\n    const testResultsDiv = document.getElementById('testResultsDiv');\n    testResultsDiv.innerHTML = '';\n    results.forEach((result, i) => {\n        const testResult = document.createElement('p');\n        testResult.innerHTML = 'Test ' + (i + 1) + ': ' + (result ? 'Passed' : 'Failed');\n        testResultsDiv.appendChild(testResult);\n    });\n}\n\n/**\n * @param {String} code The Javascript code to be run\n * @returns {any} The output of the code\n * Runs the code and returns the output, does not display it\n */\nfunction silentRunCode(code) {\n    replaceCode(code);\n    // eslint-disable-next-line no-eval\n    return eval(code);\n}\n\n/**\n * @param {String} code The Javascript code to be run\n * Runs the code and displays the output in the output div\n */\nfunction runCode(code) {\n    const output = silentRunCode(code);\n\n    const outputDiv = document.getElementById('outputDiv');\n    outputDiv.innerHTML += output;\n}\n\n// eslint-disable-next-line no-unused-vars\n// Redefine the text_print block to use the outputString variable instead of alert.\njavascript.javascriptGenerator.forBlock.text_print = function(block, generator) {\n    return (\n        \"outputString += \" +\n        (generator.valueToCode(\n            block,\n            \"TEXT\",\n            Blockly.JavaScript.ORDER_NONE\n        ) || \"''\") +\n        \";\\n\"\n    );\n};\n\nBlockly.Blocks.text_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"text input:\")\n            .appendField(new Blockly.FieldTextInput('text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_multiline_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"multiline text input:\")\n            .appendField(new Blockly.FieldMultilineInput('multiline \\n text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = '\"' + text + '\"';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_multiline_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = \"`\" + text + \"`\";\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\nclass CustomCategory extends Blockly.ToolboxCategory {\n    /**\n     * Constructor for a custom category.\n     * @override\n     */\n    constructor(categoryDef, toolbox, optParent) {\n        super(categoryDef, toolbox, optParent);\n    }\n\n    /** @override */\n    addColourBorder_(colour) {\n        this.rowDiv_.style.backgroundColor = colour;\n    }\n\n    /** @override */\n    setSelected(isSelected) {\n        // We do not store the label span on the category, so use getElementsByClassName.\n        var labelDom = this.rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n        if (isSelected) {\n            // Change the background color of the div to white.\n            this.rowDiv_.style.backgroundColor = 'white';\n            // Set the colour of the text to the colour of the category.\n            labelDom.style.color = this.colour_;\n            this.iconDom_.style.color = this.colour_;\n        } else {\n            // Set the background back to the original colour.\n            this.rowDiv_.style.backgroundColor = this.colour_;\n            // Set the text back to white.\n            labelDom.style.color = 'white';\n            this.iconDom_.style.color = 'white';\n        }\n        // This is used for accessibility purposes.\n        Blockly.utils.aria.setState(/** @type {!Element} */ (this.htmlDiv_),\n            Blockly.utils.aria.State.SELECTED, isSelected);\n    }\n}\n\nclass ToolboxLabel extends Blockly.ToolboxItem {\n    constructor(toolboxItemDef, parentToolbox) {\n        super(toolboxItemDef, parentToolbox);\n    }\n\n    /** @override */\n    init() {\n        // Create the label.\n        this.label = document.createElement('label');\n\n        // Set the name.\n        this.label.textContent = this.toolboxItemDef_.name;\n        // Set the color.\n        this.label.style.color = this.toolboxItemDef_.colour;\n    }\n\n    /** @override */\n    getDiv() {\n        return this.label;\n    }\n}\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, 'toolboxlabel', ToolboxLabel);\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, Blockly.ToolboxCategory.registrationName, CustomCategory, true);\n"],"names":["toolbox","options","collapse","comments","disable","maxBlocks","Infinity","trashcan","horizontalLayout","toolboxPosition","css","media","rtl","scrollbars","sounds","oneBasedIndex","grid","spacing","length","colour","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","nextblocksWorkspace","init","contents","loadedSave","Blockly","inject","tests","inputs","forEach","input","i","inputName","Object","keys","createForcedInputBlock","addBlockToWorkspace","moveBy","loadSave","setupButtons","blockName","workspace","newBlock","initSvg","render","state","JSON","parse","atob","serialization","workspaces","load","document","getElementById","addEventListener","runCode","displayTestResults","saveState","save","stateB64","btoa","stringify","cmid","getCMID","classList","body","cmidClass","Array","from","find","className","startsWith","parseInt","split","prompt","Blocks","appendDummyInput","appendField","FieldTextInput","setOutput","setDeletable","setColour","setTooltip","setHelpUrl","javascript","javascriptGenerator","forBlock","block","generator","text","getFieldValue","JavaScript","ORDER_NONE","results","testResultsDiv","innerHTML","result","testResult","createElement","appendChild","silentRunCode","code","eval","output","text_print","valueToCode","text_input","text_multiline_input","FieldMultilineInput","CustomCategory","ToolboxCategory","categoryDef","optParent","rowDiv_","style","backgroundColor","isSelected","labelDom","this","getElementsByClassName","color","colour_","iconDom_","utils","aria","setState","htmlDiv_","State","SELECTED","ToolboxLabel","ToolboxItem","toolboxItemDef","parentToolbox","label","textContent","toolboxItemDef_","name","registry","register","Type","TOOLBOX_ITEM","registrationName"],"mappings":"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"}