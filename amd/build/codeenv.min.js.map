{"version":3,"file":"codeenv.min.js","sources":["../src/codeenv.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/codeenv\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\nlet toolbox = {\n    'kind': 'categoryToolbox',\n    'readOnly': true,\n    'contents': [\n        {\n            'kind': 'toolboxlabel',\n            'name': 'NextBlocks',\n            'colour': 'darkslategrey'\n        },\n        {\n            'kind': 'category',\n            'name': 'Logic',\n            'colour': '5b80a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa fa-cog',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'controls_if',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_compare',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_operation',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'logic_boolean',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Math',\n            'colour': '5b67a5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-plus-minus',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'math_number',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'math_arithmetic',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Text',\n            'colour': '5ba58c',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-font',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'text',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_print',\n                },\n            ],\n        },\n        {\n            'kind': 'category',\n            'name': 'Variables',\n            'colour': 'a55b80',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-clipboard-list',\n            },\n            'custom': 'VARIABLE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Functions',\n            'colour': '995ba5',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-code',\n            },\n            'custom': 'PROCEDURE',\n        },\n        {\n            'kind': 'category',\n            'name': 'Input',\n            'colour': '180',\n            \"cssConfig\": {\n                'icon': 'customIcon fa-solid fa-keyboard',\n            },\n            'contents': [\n                {\n                    'kind': 'block',\n                    'type': 'number_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_input',\n                },\n                {\n                    'kind': 'block',\n                    'type': 'text_multiline_input',\n                },\n            ],\n        },\n    ],\n};\n\n// GetMainWorkspace might remove need for global variable\nlet nextblocksWorkspace;\n\ndefine(['mod_nextblocks/lib', 'mod_nextblocks/repository'], function(lib, repository) {\n    /**\n     * @param {CodeString} code The Javascript code to be run\n     * Runs the code and displays the output in the output div\n     */\n    function runCode(code) {\n        const output = lib.silentRunCode(code.getCompleteCodeString());\n        // Replace newlines with <br /> so that they are displayed correctly\n        const outputHTML = output.replace(/\\n/g, \"<br />\");\n        const outputDiv = document.getElementById('output-div');\n        // Wrap the output in a div with max-height and overflow-y: auto to make it scrollable if too long (multiline input)\n        outputDiv.innerHTML = `<div style=\"max-height: 100%; overflow-y: auto;\"><pre>${outputHTML}</pre></div>`;\n    }\n\n    /**\n     * Saves the current state of the workspace to the database, for later retrieval and display\n     */\n    const saveState = () => {\n        const state = Blockly.serialization.workspaces.save(nextblocksWorkspace);\n        // eslint-disable-next-line no-unused-vars\n        const stateB64 = btoa(JSON.stringify(state));\n        // eslint-disable-next-line no-unused-vars\n        const cmid = getCMID();\n        repository.saveWorkspace(cmid, stateB64);\n    };\n\n    const submitWorkspace = async(inputFuncDecs) => {\n        const codeString = lib.getWorkspaceCode(nextblocksWorkspace, inputFuncDecs).getSubmittableCodeString();\n        const state = Blockly.serialization.workspaces.save(nextblocksWorkspace);\n        const stateB64 = btoa(JSON.stringify(state));\n        const cmid = getCMID();\n        repository.submitWorkspace(cmid, stateB64, codeString);\n\n        const delay = ms => new Promise(res => setTimeout(res, ms));\n        await delay(1000);\n\n        location.reload();\n    };\n\n    /**\n     * @param {any[]} results The results of the tests\n     * @param {{}} tests The tests that were run\n     * @param {String[]} uncalledInputFuncs The names of the input functions that were not called in the code, if any\n     * Displays the results of the tests in the output div\n     */\n    function displayTestResults(results, tests, uncalledInputFuncs) {\n        const testResultsDiv = document.getElementById('output-div');\n        testResultsDiv.innerHTML = lib.testsAccordion(results, tests, uncalledInputFuncs);\n    }\n\n    /**\n     * @param {{}} tests The tests to be run\n     * @param {WorkspaceSvg} workspace The workspace to get the code from\n     * @param {string} inputFuncDecs\n     * @param {number} lastUserReaction The type of reaction the current user last submitted\n     * @param {boolean} isTeacherReport Whether the report to be displayed is a teacher report\n     */\n    function setupButtons(tests, workspace, inputFuncDecs, lastUserReaction, isTeacherReport) {\n        // Listen for clicks on the run button\n        const runButton = document.getElementById('runButton');\n        runButton.addEventListener('click', function() {\n            const code = lib.getWorkspaceCode(workspace, inputFuncDecs);\n            lib.replaceCode(code);\n            runCode(code);\n        });\n\n        if (tests !== null) {\n            // Listen for clicks on the run tests button\n            const runTestsButton = document.getElementById('runTestsButton');\n            runTestsButton.addEventListener('click', () => { // Needs anonymous function wrap to pass argument\n                const code = lib.getWorkspaceCode(workspace, inputFuncDecs).getCompleteCodeString();\n                const uncalledInputFuncs = lib.getMissingInputCalls(code, inputFuncDecs);\n                let results;\n                // If not all input functions are called, automatically fails all tests\n                if (uncalledInputFuncs.length > 0) {\n                    results = null;\n                } else {\n                    results = lib.runTests(code, tests);\n                }\n                displayTestResults(results, tests, uncalledInputFuncs);\n            });\n        }\n\n        // Listen for clicks on the save button\n        const saveButton = document.getElementById('saveButton');\n        saveButton.addEventListener('click', saveState);\n\n        // Listen for clicks on the submit button, if it exists (doesn't exist in report pages)\n        const submitButton = document.getElementById('submitButton');\n        if (submitButton !== null) {\n            submitButton.addEventListener('click', () => {\n                submitWorkspace(inputFuncDecs);\n            });\n        }\n\n        // Convert the lastUserReaction to a string\n        let lastUserReactionString = \"\";\n        if (lastUserReaction === 1) {\n            lastUserReactionString = \"easy\";\n        } else if (lastUserReaction === 2) {\n            lastUserReactionString = \"medium\";\n        } else if (lastUserReaction === 3) {\n            lastUserReactionString = \"hard\";\n        }\n\n        const imgs = document.getElementsByClassName(\"emoji-img\");\n        Array.from(imgs).forEach((img) => {\n            let imageType = '';\n            if (img.src.includes(\"easy\")) {\n                imageType = \"easy\";\n            } else if (img.src.includes(\"think\")) {\n                imageType = \"medium\";\n            } else if (img.src.includes(\"hard\")) {\n                imageType = \"hard\";\n            }\n\n            // Start with one image selected if the user has already reacted in a previous session\n            if (lastUserReactionString === imageType) {\n                changeImageBackground(img);\n            }\n\n            // Only listen for clicks on the images if page is not a teacher report\n            if (!isTeacherReport) {\n                img.addEventListener(\"click\", () => {\n                    // Submit reaction, and wait for response with new reaction counts\n                    const newReactionsPromise = repository.submitReaction(getCMID(), imageType);\n                    newReactionsPromise.then((newReactions) => {\n                        updatePercentages(newReactions.reactionseasy, newReactions.reactionsmedium, newReactions.reactionshard);\n                        changeImageBackground(img);\n                    });\n                });\n            }\n        });\n    }\n\n    return {\n        /**\n         * @param {string} contents The contents of the tests file.\n         * @param {string} loadedSave The contents of the loaded save, in a base64-encoded JSON string.\n         * @param {{}} customBlocks The custom blocks to be added to the toolbox, created by the exercise creator.\n         * @param {number} remainingSubmissions The number of remaining submissions for the current user.\n         * @param {string[]} reactions An array of 3 strings, each containing the number of reactions of a certain type\n         * (easy, medium, hard).\n         * @param {number} lastUserReaction The type of reaction the current user last submitted\n         * (0 = no reaction, 1 = easy, 2 = medium, 3 = hard).\n         * @param {number} reportType Indicates the type of report to be displayed (0 = no report, 1 = teacher report,\n         * 2 = student report).\n         */\n        init: function(contents, loadedSave, customBlocks, remainingSubmissions, reactions, lastUserReaction, reportType = 0) {\n            // If report is student but he can still submit, change to no report so he can use the workspace\n            if (reportType === 2 && remainingSubmissions > 0) {\n                reportType = 0;\n            }\n            updatePercentages(reactions[0], reactions[1], reactions[2]);\n\n            const blocklyDiv = document.getElementById('blocklyDiv');\n            const blocklyArea = document.getElementById('blocklyArea');\n\n            // If there are custom blocks, add a new category to the toolbox\n            if (customBlocks.length > 0) {\n                toolbox.contents.push({\n                    'kind': 'category',\n                    'name': 'Custom Blocks',\n                    'colour': 'a55b80',\n                    \"cssConfig\": {\n                        'icon': 'customIcon fa-solid fa-code',\n                    },\n                    'contents': [],\n                });\n            }\n\n            customBlocks.forEach((block) => {\n                let splitTest = block.generator.split(\"forBlock['\");\n                let dotCase = false;\n                if (splitTest.length < 2) {\n                    splitTest = block.generator.split(\"forBlock.\");\n                    if (splitTest.length < 2) {\n                        throw new Error(\"Invalid generator\");\n                    }\n                    dotCase = true;\n                }\n                const blockName = splitTest[1].split(dotCase ? \" = \" : \"']\")[0].trim();\n                // Add block to toolbox\n                toolbox.contents[toolbox.contents.length - 1].contents.push({\n                    'kind': 'block',\n                    'type': blockName,\n                });\n\n                // eslint-disable-next-line no-eval\n                eval(block.definition);\n                // eslint-disable-next-line no-eval\n                eval(block.generator);\n            });\n\n            nextblocksWorkspace = Blockly.inject(blocklyDiv, getOptions(remainingSubmissions, reportType !== 0));\n            javascript.javascriptGenerator.init(nextblocksWorkspace);\n\n            // Use resize observer instead of window resize event. This captures both window resize and element resize\n            const resizeObserver = new ResizeObserver(() => onResize(blocklyArea, blocklyDiv, nextblocksWorkspace));\n            resizeObserver.observe(blocklyArea);\n\n            // Parse json from test file contents\n            const tests = JSON.parse(contents);\n            let inputFunctionDeclarations = {funcDecs: \"\"};\n            if (tests !== null) {\n                // Create forced input blocks from tests file. Only add to workspace if there is no workspace to load. If there\n                // was a workspace to load, they would be added twice.\n                const inputs = tests[0].inputs;\n\n                inputs.forEach((input, i) => {\n                    const inputName = Object.keys(input)[0];\n                    const inputType = Object.keys(input[inputName])[0];\n                    createForcedInputBlock(inputName, inputType, inputFunctionDeclarations); // Doesn't add block to workspace, just\n                    // defines it. Needed for save loading\n\n                    if (loadedSave === null) { // Only add to workspace if there is no workspace to load\n                        const blockName = \"forced_input_\" + inputName;\n                        let newBlock = addBlockToWorkspace(blockName, nextblocksWorkspace);\n                        newBlock.moveBy(0, i * 50 + 50); // Move block down a bit so that they don't overlap\n                    }\n                });\n            }\n\n            // Load the save, if there is one\n            if (loadedSave !== null) {\n                loadSave(loadedSave, nextblocksWorkspace);\n            } else {\n                addBlockToWorkspace('start', nextblocksWorkspace);\n            }\n\n            // If page is a report page, lock all workspace blocks while still allowing comments\n            if (reportType !== 0) {\n                lockWorkspaceBlocks(nextblocksWorkspace);\n            }\n\n            setupButtons(tests, nextblocksWorkspace, inputFunctionDeclarations.funcDecs, lastUserReaction, reportType === 1);\n        },\n    };\n});\n\n/**\n * Locks all blocks in a workspace, preventing them from being moved or deleted\n * @param {WorkspaceSvg} workspace The workspace to lock\n */\nconst lockWorkspaceBlocks = function(workspace) {\n    workspace.getTopBlocks(false).forEach((block) => {\n        lockBlock(block);\n        lockChildren(block);\n    });\n\n    /**\n     * Recursively locks a block and all its children, preventing them from being moved or deleted\n     * @param {BlockSvg} block The block that will be locked and have its children locked\n     */\n    function lockChildren(block) {\n        block.getChildren(false).forEach((child) => {\n            lockBlock(child);\n\n            // Have to mess with internal Blockly stuff to block only the inputs while still allowing comments\n            child.inputList.forEach((input) => {\n                input.fieldRow.forEach((field) => {\n                    field.setEnabled(false);\n                });\n            });\n\n            lockChildren(child);\n        });\n    }\n\n    /**\n     * Locks a block, preventing it from being moved or deleted\n     * @param {BlockSvg} block The block that will be locked\n     */\n    function lockBlock(block) {\n        block.setMovable(false);\n        block.setDeletable(false);\n    }\n};\n\n// Makes background of image blue if it is not blue, and vice versa\nconst changeImageBackground = function(img) {\n    // Change background of all other images to secondary\n    const imgs = document.getElementsByClassName(\"emoji-img\");\n    Array.from(imgs).forEach((otherImg) => {\n        if (otherImg !== img) {\n            otherImg.classList.remove(\"bg-primary\");\n            otherImg.classList.add(\"bg-secondary\");\n        }\n    });\n\n    // Toggle background of clicked image\n    if (img.classList.contains(\"bg-primary\")) {\n        img.classList.remove(\"bg-primary\");\n        img.classList.add(\"bg-secondary\");\n    } else {\n        img.classList.remove(\"bg-secondary\");\n        img.classList.add(\"bg-primary\");\n    }\n};\n\n/**\n * Updates the percentages of difficulty levels (easy, medium, hard) on the page.\n *\n * @param {number} easy - The count of 'easy' reactions.\n * @param {number} medium - The count of 'medium' reactions.\n * @param {number} hard - The count of 'hard' reactions.\n * @param {string} [inc=\"\"] - The difficulty level to increment. If not provided, no level is incremented.\n * Unused right now, just for future-proofing\n */\nconst updatePercentages = function(easy, medium, hard, inc = \"\") {\n    // Mapping of difficulty levels to their corresponding HTML elements\n    const elements = {\n        \"easy\": document.getElementById('percentage-easy'),\n        \"medium\": document.getElementById('percentage-medium'),\n        \"hard\": document.getElementById('percentage-hard')\n    };\n\n    // Mapping of difficulty levels to their counts\n    const values = {\n        \"easy\": easy,\n        \"medium\": medium,\n        \"hard\": hard\n    };\n\n    // If a difficulty level to increment is provided, increment its count\n    if (inc in values) {\n        values[inc]++;\n    }\n\n    // Calculate the percentages for each difficulty level\n    let percentages = calcPercentages(values.easy, values.medium, values.hard);\n\n    // Update the HTML elements with the new percentages\n    elements.easy.innerHTML = percentages[0] + '%';\n    elements.medium.innerHTML = percentages[1] + '%';\n    elements.hard.innerHTML = percentages[2] + '%';\n};\n\nconst calcPercentages = (easy, medium, hard) => {\n    const total = easy + medium + hard;\n    return total === 0 ? [0, 0, 0] : [easy, medium, hard].map(val => Math.round((val / total) * 100));\n};\n\nconst getOptions = function(remainingSubmissions, readOnly) {\n    return {\n        toolbox: readOnly ? null : toolbox,\n        collapse: true,\n        comments: true,\n        disable: false,\n        maxBlocks: Infinity,\n        trashcan: !readOnly,\n        horizontalLayout: false,\n        toolboxPosition: 'start',\n        css: true,\n        media: 'https://blockly-demo.appspot.com/static/media/',\n        rtl: false,\n        scrollbars: true,\n        sounds: true,\n        oneBasedIndex: false,\n        readOnly: remainingSubmissions <= 0,\n        grid: {\n            spacing: 20,\n            length: 1,\n            colour: '#888',\n            snap: false,\n        },\n        zoom: !readOnly ? null : {\n            controls: true,\n            wheel: true,\n            startScale: 1,\n            maxScale: 3,\n            minScale: 0.3,\n            scaleSpeed: 1.2,\n        },\n    };\n};\n\nconst onResize = function(blocklyArea, blocklyDiv, nextblocksWorkspace) {\n    // Compute the absolute coordinates and dimensions of blocklyArea.\n    let element = blocklyArea;\n    let x = 0;\n    let y = 0;\n    do {\n        x += element.offsetLeft;\n        y += element.offsetTop;\n        element = element.offsetParent;\n    } while (element);\n    // Position blocklyDiv over blocklyArea.\n    blocklyDiv.style.left = x + 'px';\n    blocklyDiv.style.top = y + 'px';\n    blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';\n    blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';\n    Blockly.svgResize(nextblocksWorkspace);\n};\n\n/**\n * @param {String} blockName The name of the input block to be added (prompt on the left side of the block\n * @param {WorkspaceSvg} workspace The workspace to add the input block to\n * @returns {BlockSvg} The newly created block\n */\nfunction addBlockToWorkspace(blockName, workspace) {\n    const newBlock = workspace.newBlock(blockName);\n    newBlock.initSvg();\n    newBlock.render();\n    return newBlock;\n}\n\n/**\n * @param {String} loadedSave\n * @param {WorkspaceSvg} workspace\n */\nfunction loadSave(loadedSave, workspace) {\n    const state = JSON.parse(atob(loadedSave));\n    Blockly.serialization.workspaces.load(state, workspace);\n}\n\n/**\n * @returns {Number} The course module id of the current page\n */\nfunction getCMID() {\n    const classList = document.body.classList;\n    const cmidClass = Array.from(classList).find((className) => className.startsWith('cmid-'));\n    return parseInt(cmidClass.split('-')[1]);\n}\n\n/**\n * @param {string} prompt The name of the input block to be added (prompt on the left side of the block)\n * @param {string} inputType The type of the input block to be added (string, number, etc.)\n * @param {object} inputFunctionDeclarations Contains the string containing the function declarations for the input\n * blocks, to be added to the top of the code. Is an object so that it is passed by reference.\n */\nfunction createForcedInputBlock(prompt, inputType, inputFunctionDeclarations) {\n    const blockName = \"forced_input_\" + prompt;\n    if (inputType === \"string\") {\n        Blockly.Blocks[blockName] = {\n            init: function() {\n                this.appendDummyInput().appendField(prompt).appendField(new Blockly.FieldTextInput('text'), prompt);\n                this.setOutput(true, \"String\");\n                this.setDeletable(false);\n                this.setColour(180);\n                this.setTooltip(\"\");\n                this.setHelpUrl(\"\");\n            }\n        };\n\n        // eslint-disable-next-line no-unused-vars\n        javascript.javascriptGenerator.forBlock[blockName] = function(block, generator) {\n            const text = block.getFieldValue(prompt);\n            let blockCode = `input${prompt}('${text}')`;\n            return [blockCode, Blockly.JavaScript.ORDER_NONE];\n        };\n    } else if (inputType === \"number\") {\n        Blockly.Blocks[blockName] = {\n            init: function() {\n                this.appendDummyInput().appendField(prompt).appendField(new Blockly.FieldNumber(0), prompt);\n                this.setOutput(true, \"Number\");\n                this.setColour(180);\n                this.setTooltip(\"\");\n                this.setHelpUrl(\"\");\n            }\n        };\n\n        // eslint-disable-next-line no-unused-vars\n        javascript.javascriptGenerator.forBlock[blockName] = function(block, generator) {\n            const number = block.getFieldValue(prompt);\n            let blockCode = `input${prompt}(${number})`;\n            return [blockCode, Blockly.JavaScript.ORDER_NONE];\n        };\n    }\n\n    inputFunctionDeclarations.funcDecs += `function input${prompt}(string) {\\n   return string;\\n}\\n`;\n    javascript.javascriptGenerator.addReservedWords(`input${prompt}`);\n}\n\n// eslint-disable-next-line no-extend-native\nString.prototype.hideWrapperFunction = function() {\n    const lines = this.split('\\n');\n    lines.splice(0, 2); // Remove the first two lines\n    return lines.join('\\n');\n};\n\n// Redefine the text_print block to use the outputString variable instead of alert.\njavascript.javascriptGenerator.forBlock.text_print = function(block, generator) {\n    return (\n        \"print(\" +\n        (generator.valueToCode(\n            block,\n            \"TEXT\",\n            Blockly.JavaScript.ORDER_NONE\n        ) || \"''\") +\n        \");\\n\"\n    );\n};\n\nBlockly.Blocks.number_input = {\n    init: function() {\n        this.appendDummyInput()\n        .appendField(\"number input\")\n        .appendField(new Blockly.FieldNumber(0), \"number_input\");\n        this.setOutput(true, \"Number\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"text input:\")\n            .appendField(new Blockly.FieldTextInput('text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.text_multiline_input = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"multiline text input:\")\n            .appendField(new Blockly.FieldMultilineInput('multiline \\n text'),\n                'text_input');\n        this.setOutput(true, \"String\");\n        this.setColour(180);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n    }\n};\n\nBlockly.Blocks.start = {\n    init: function() {\n        this.appendDummyInput()\n            .appendField(\"start\");\n        this.setNextStatement(true, null);\n        this.setColour(60);\n        this.setTooltip(\"\");\n        this.setHelpUrl(\"\");\n        this.setDeletable(false);\n    }\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.start = function(block, generator) {\n    // Get all blocks attached to this block\n    let code = '';\n    return code;\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.number_input = function(block, generator) {\n    const number = block.getFieldValue('number_input');\n    let code = 'input(' + number + ')';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = 'input(\"' + text + '\")';\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n// eslint-disable-next-line no-unused-vars\njavascript.javascriptGenerator.forBlock.text_multiline_input = function(block, generator) {\n    const text = block.getFieldValue('text_input');\n    let code = \"input(`\" + text + \"`)\";\n    return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\nclass CustomCategory extends Blockly.ToolboxCategory {\n    /**\n     * Constructor for a custom category.\n     * @override\n     */\n    constructor(categoryDef, toolbox, optParent) {\n        super(categoryDef, toolbox, optParent);\n    }\n\n    /** @override */\n    addColourBorder_(colour) {\n        this.rowDiv_.style.backgroundColor = colour;\n    }\n\n    /** @override */\n    setSelected(isSelected) {\n        // We do not store the label span on the category, so use getElementsByClassName.\n        var labelDom = this.rowDiv_.getElementsByClassName('blocklyTreeLabel')[0];\n        if (isSelected) {\n            // Change the background color of the div to white.\n            this.rowDiv_.style.backgroundColor = 'white';\n            // Set the colour of the text to the colour of the category.\n            labelDom.style.color = this.colour_;\n            this.iconDom_.style.color = this.colour_;\n        } else {\n            // Set the background back to the original colour.\n            this.rowDiv_.style.backgroundColor = this.colour_;\n            // Set the text back to white.\n            labelDom.style.color = 'white';\n            this.iconDom_.style.color = 'white';\n        }\n        // This is used for accessibility purposes.\n        Blockly.utils.aria.setState(/** @type {!Element} */ (this.htmlDiv_),\n            Blockly.utils.aria.State.SELECTED, isSelected);\n    }\n}\n\nclass ToolboxLabel extends Blockly.ToolboxItem {\n    constructor(toolboxItemDef, parentToolbox) {\n        super(toolboxItemDef, parentToolbox);\n    }\n\n    /** @override */\n    init() {\n        // Create the label.\n        this.label = document.createElement('label');\n\n        // Set the name.\n        this.label.textContent = this.toolboxItemDef_.name;\n        // Set the color.\n        this.label.style.color = this.toolboxItemDef_.colour;\n    }\n\n    /** @override */\n    getDiv() {\n        return this.label;\n    }\n}\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, 'toolboxlabel', ToolboxLabel);\n\nBlockly.registry.register(Blockly.registry.Type.TOOLBOX_ITEM, Blockly.ToolboxCategory.registrationName, CustomCategory, true);\n"],"names":["toolbox","nextblocksWorkspace","define","lib","repository","runCode","code","outputHTML","silentRunCode","getCompleteCodeString","replace","document","getElementById","innerHTML","saveState","state","Blockly","serialization","workspaces","save","stateB64","btoa","JSON","stringify","cmid","getCMID","saveWorkspace","submitWorkspace","inputFuncDecs","codeString","getWorkspaceCode","getSubmittableCodeString","delay","ms","Promise","res","setTimeout","location","reload","displayTestResults","results","tests","uncalledInputFuncs","testsAccordion","setupButtons","workspace","lastUserReaction","isTeacherReport","addEventListener","replaceCode","getMissingInputCalls","length","runTests","submitButton","lastUserReactionString","imgs","getElementsByClassName","Array","from","forEach","img","imageType","src","includes","changeImageBackground","submitReaction","then","newReactions","updatePercentages","reactionseasy","reactionsmedium","reactionshard","init","contents","loadedSave","customBlocks","remainingSubmissions","reactions","reportType","blocklyDiv","blocklyArea","push","block","splitTest","generator","split","dotCase","Error","blockName","trim","eval","definition","inject","getOptions","javascript","javascriptGenerator","resizeObserver","ResizeObserver","onResize","observe","parse","inputFunctionDeclarations","funcDecs","inputs","input","i","inputName","Object","keys","createForcedInputBlock","addBlockToWorkspace","moveBy","loadSave","lockWorkspaceBlocks","lockChildren","getChildren","child","lockBlock","inputList","fieldRow","field","setEnabled","setMovable","setDeletable","getTopBlocks","otherImg","classList","remove","add","contains","easy","medium","hard","inc","elements","values","percentages","calcPercentages","total","map","val","Math","round","readOnly","collapse","comments","disable","maxBlocks","Infinity","trashcan","horizontalLayout","toolboxPosition","css","media","rtl","scrollbars","sounds","oneBasedIndex","grid","spacing","colour","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","element","x","y","offsetLeft","offsetTop","offsetParent","style","left","top","width","offsetWidth","height","offsetHeight","svgResize","newBlock","initSvg","render","atob","load","body","cmidClass","find","className","startsWith","parseInt","prompt","inputType","Blocks","appendDummyInput","appendField","FieldTextInput","setOutput","setColour","setTooltip","setHelpUrl","forBlock","text","getFieldValue","JavaScript","ORDER_NONE","FieldNumber","number","addReservedWords","String","prototype","hideWrapperFunction","lines","this","splice","join","text_print","valueToCode","number_input","text_input","text_multiline_input","FieldMultilineInput","start","setNextStatement","CustomCategory","ToolboxCategory","categoryDef","optParent","rowDiv_","backgroundColor","isSelected","labelDom","color","colour_","iconDom_","utils","aria","setState","htmlDiv_","State","SELECTED","ToolboxLabel","ToolboxItem","toolboxItemDef","parentToolbox","label","createElement","textContent","toolboxItemDef_","name","registry","register","Type","TOOLBOX_ITEM","registrationName"],"mappings":"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"}