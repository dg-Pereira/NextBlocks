{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/env\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals javascript */\n\n/**\n * Injects the box for inserting the program input below the blockly area\n * @param {Number} i the index of the input box, to avoid repetition of ids\n */\nexport const injectInputBox = (i) => {\n    // Create input box for program input\n    const inputBox = document.createElement('input');\n    inputBox.setAttribute('type', 'text');\n    inputBox.setAttribute('id', 'programInputBox' + i);\n\n    // Create button to submit input\n    const submitButton = document.createElement('button');\n    submitButton.setAttribute('id', 'programInputButton' + i);\n    submitButton.setAttribute('type', 'button');\n    submitButton.innerHTML = 'Submit';\n\n    // Insert input box and button below blockly area\n    const blocklyDiv = document.getElementById('blocklyDiv');\n    blocklyDiv.insertAdjacentElement('afterend', inputBox);\n    inputBox.insertAdjacentElement('afterend', submitButton);\n};\n\n/**\n * Inserts the new program code in the code div below the blockly area, replacing the old one if it exists\n * @param {String} code the new program code to be displayed\n */\nexport const replaceCode = (code) => {\n    const codeDiv = document.getElementById('codeDiv');\n    codeDiv.innerHTML = formatCodeHTML(code);\n};\n\n/**\n * Formats the code with correct html structure to be displayed in the code div\n * TODO: implement this function\n * @param {String} code the code text to be formatted (string literal)\n * @returns {String} the formatted code\n */\nconst formatCodeHTML = (code) => {\n    // Code is string literal\n    return \"<pre>\" + code + \"</pre>\";\n};\n\n// Maybe in the future write regular expression to validate the tests file\n// Consider doing parsing on the server side, when the file is submitted\n// TODO a more formal file format description\n/**\n * Parses the tests file and returns a json object with the tests data\n * @param {String} fileString the string containing the contents of the tests file\n * @returns {{}} A JSON object with the tests data\n */\nexport const parseTestsFile = (fileString) => {\n    try {\n        // The returned object has a list of test cases\n        let jsonReturn = [];\n\n        // Different test cases are separated by |\n        let testCases = fileString.split(\"|\");\n\n        testCases.forEach((testCase) => {\n            // Each test case contains a list of inputs (and an output)\n            let thisTestCaseJson = {};\n            thisTestCaseJson.inputs = [];\n\n            // The input and output of the test are separated by -\n            let inputOutput = testCase.split(\"-\");\n            let inputs = inputOutput[0];\n            thisTestCaseJson.output = inputOutput[1].trim(); // Remove newlines and add output of test to JSON\n\n            inputs.split(\"_\").forEach((input) => {\n                if (input.length < 3) { // Skip junk elements\n                    return;\n                }\n                // Each input has multiple lines. The first line is the input name, the prompt, and the rest are\n                // the input values for that input\n                let inputLines = input.split(/\\n/).map((line) => line.trim()); // Remove junk line breaks from every line\n                inputLines = inputLines.slice(1, inputLines.length - 1); // First and last lines are junk\n                // Contains the input prompt and a list of input values\n                let thisInputJson = {};\n                thisInputJson[inputLines[0]] = inputLines.slice(1);\n                thisTestCaseJson.inputs.push(thisInputJson); // Add this input to the list of inputs of this test case\n            });\n            jsonReturn.push(thisTestCaseJson); // Add this test case to the list of test cases\n        });\n        return jsonReturn;\n    } catch (e) {\n        throw new Error(\"Error parsing tests file: \" + e);\n    }\n};\n\n/**\n * Runs the tests on the given workspace and returns an array of booleans, one for each test, indicating whether\n * the test passed or not\n * @param {WorkspaceSvg} workspace the workspace to run the tests on\n * @param {{}} tests the tests to run\n * @returns {Boolean[]} an array of booleans, one for each test, indicating whether the test passed or not\n */\nexport const runTests = (workspace, tests) => {\n    // eslint-disable-next-line no-unused-vars\n    const code = getWorkspaceCode(workspace);\n    let results = [];\n    tests.forEach((test) => {\n        let thisTestCode = code; // Need to copy, so that the code is not modified for the next test\n        const inputs = test.inputs;\n        inputs.forEach((input) => {\n            // eslint-disable-next-line no-console\n            const prompt = Object.keys(input)[0];\n            const values = input[prompt];\n\n            const inputIndex = thisTestCode.indexOf(prompt);\n            // Get index of first string literal after prompt\n            let inputQuote1 = thisTestCode.indexOf('\"', inputIndex);\n            const inputQuote2 = thisTestCode.indexOf('\"', inputQuote1 + 1);\n\n            const preStr = thisTestCode.substring(0, inputQuote1 + 1);\n            const postStr = thisTestCode.substring(inputQuote2);\n\n            thisTestCode = preStr + values[0] + postStr;\n\n        });\n        // eslint-disable-next-line no-unused-vars\n        const testOutput = test.output;\n        // eslint-disable-next-line no-eval\n        const codeOutput = eval(thisTestCode);\n        // eslint-disable-next-line no-console\n        console.log(\"Test output: \" + testOutput);\n        // eslint-disable-next-line no-console\n        console.log(\"Code output: \" + codeOutput);\n        results.push(testOutput === codeOutput);\n    });\n    return results;\n};\n\n/**\n * @param {WorkspaceSvg} workspace the workspace to get the code from\n * @returns {String} the code generated by Blockly for the current workspace\n *\n * Returns the Javascript code string generated by Blockly, with the necessary wrapping code\n */\nexport const getWorkspaceCode = (workspace) => {\n    let code = javascript.javascriptGenerator.workspaceToCode(workspace);\n    const preamble = `(function () {\n    let outputString = \\`\\`;\\n`;\n    const postscript = `return outputString;\n})();\\n`;\n    // Add a preamble and a postscript to the code.\n    code = preamble + code + postscript;\n    return code;\n};\n"],"names":["injectInputBox","i","inputBox","document","createElement","setAttribute","submitButton","innerHTML","getElementById","insertAdjacentElement","replaceCode","code","formatCodeHTML","parseTestsFile","fileString","jsonReturn","split","forEach","testCase","thisTestCaseJson","inputOutput","inputs","output","trim","input","length","inputLines","map","line","thisInputJson","slice","push","e","Error","runTests","workspace","tests","getWorkspaceCode","results","test","thisTestCode","prompt","Object","keys","values","inputIndex","indexOf","inputQuote1","inputQuote2","preStr","substring","postStr","testOutput","codeOutput","eval","console","log","javascript","javascriptGenerator","workspaceToCode"],"mappings":";;;;;;;IAaaA,eAAiB,SAACC,OAErBC,SAAWC,SAASC,cAAc,SACxCF,SAASG,aAAa,OAAQ,QAC9BH,SAASG,aAAa,KAAM,kBAAoBJ,OAG1CK,aAAeH,SAASC,cAAc,UAC5CE,aAAaD,aAAa,KAAM,qBAAuBJ,GACvDK,aAAaD,aAAa,OAAQ,UAClCC,aAAaC,UAAY,SAGNJ,SAASK,eAAe,cAChCC,sBAAsB,WAAYP,UAC7CA,SAASO,sBAAsB,WAAYH,0DAOlCI,YAAc,SAACC,MACRR,SAASK,eAAe,WAChCD,UAAYK,eAAeD,4CASjCC,eAAiB,SAACD,YAEb,QAAUA,KAAO,UAWfE,eAAiB,SAACC,oBAGnBC,WAAa,UAGDD,WAAWE,MAAM,KAEvBC,SAAQ,SAACC,cAEXC,iBAAmB,CACvBA,OAA0B,IAGtBC,YAAcF,SAASF,MAAM,KAC7BK,OAASD,YAAY,GACzBD,iBAAiBG,OAASF,YAAY,GAAGG,OAEzCF,OAAOL,MAAM,KAAKC,SAAQ,SAACO,YACnBA,MAAMC,OAAS,QAKfC,WAAaF,MAAMR,MAAM,MAAMW,KAAI,SAACC,aAASA,KAAKL,UAGlDM,cAAgB,GACpBA,eAHAH,WAAaA,WAAWI,MAAM,EAAGJ,WAAWD,OAAS,IAG5B,IAAMC,WAAWI,MAAM,GAChDX,iBAAiBE,OAAOU,KAAKF,mBAEjCd,WAAWgB,KAAKZ,qBAEbJ,WACT,MAAOiB,SACC,IAAIC,MAAM,6BAA+BD,gDAW1CE,SAAW,SAAXA,SAAYC,UAAWC,WAE1BzB,KAAO0B,iBAAiBF,WAC1BG,QAAU,UACdF,MAAMnB,SAAQ,SAACsB,UACPC,aAAe7B,KACbU,OAASkB,KAAKlB,OACpBA,OAAOJ,SAAQ,SAACO,WAENiB,OAASC,OAAOC,KAAKnB,OAAO,GAC5BoB,OAASpB,MAAMiB,QAEfI,WAAaL,aAAaM,QAAQL,QAEpCM,YAAcP,aAAaM,QAAQ,IAAKD,YACtCG,YAAcR,aAAaM,QAAQ,IAAKC,YAAc,GAEtDE,OAAST,aAAaU,UAAU,EAAGH,YAAc,GACjDI,QAAUX,aAAaU,UAAUF,aAEvCR,aAAeS,OAASL,OAAO,GAAKO,eAIlCC,WAAab,KAAKjB,OAElB+B,WAAaC,KAAKd,cAExBe,QAAQC,IAAI,gBAAkBJ,YAE9BG,QAAQC,IAAI,gBAAkBH,YAC9Bf,QAAQP,KAAKqB,aAAeC,eAEzBf,wCASED,iBAAmB,SAACF,eACzBxB,KAAO8C,WAAWC,oBAAoBC,gBAAgBxB,kBAM1DxB,oDAAkBA"}