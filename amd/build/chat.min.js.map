{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/chat\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([], function() {\n    return {\n        /**\n         *\n         * @param {string} userName username of the user\n         * @param {number} activityId id of the activity\n         * @param {function(string, string, number, number): void} saveMessage function to save the message in the database\n         * @param {string} serverUrl url of the chat server to connect to\n         * */\n        run: function(userName, activityId, saveMessage, serverUrl = 'ws://localhost:8060') {\n            const socket = new WebSocket(serverUrl);\n            socket.addEventListener(\"open\", () => chatSetup(socket, userName, activityId, saveMessage));\n            socket.addEventListener(\"message\", (event) => appendMessage(event.data, activityId));\n            //socket.addEventListener(\"close\", () => socketError(activityId, \"Connection closed by server\"));\n            //socket.addEventListener(\"error\", () => socketError(activityId));\n        },\n\n        /**\n         * Populates the chat box with the last 100 messages from the database\n         * @param {function(number, number): Promise} getMessages function to fetch the messages from the database\n         * @param {number} activityId id of the activity\n         */\n        populate: function(getMessages, activityId) {\n            // Get last 100 messages from database\n            const messagesPromise = getMessages(100, activityId);\n\n            messagesPromise.then((messages) => {\n                // Add messages to chat box\n                messages.forEach((dbMessage) => {\n                    const message = {type: \"dbMessage\", sender: dbMessage.username, text: dbMessage.message, activity: activityId,\n                        timestamp: dbMessage.timestamp};\n                    appendMessage(message, activityId, true);\n                });\n            });\n        },\n    };\n});\n\n// eslint-disable-next-line no-unused-vars\nconst socketError = function(activityId, errorMessage = \"Connection error\") {\n    const errorJSON = {type: \"error\", sender: \"System\", text: errorMessage, activity: activityId, timestamp: Date.now()};\n    appendMessage(errorJSON, activityId, true);\n};\n\n/**\n * Adds a message to the chat box\n * @param {string | {type: string, sender: string, text: string, activity: number, timestamp: number}} message message to append\n * @param {number} activityId id of the activity. If the message is not for this activity, it is not appended\n * @param {boolean} isParsed true if the message is already in JSON format, false otherwise\n * @throws {Error} if the message is not in a valid JSON format\n */\nconst appendMessage = function(message, activityId, isParsed = false) {\n    if (!isParsed) {\n        // eslint-disable-next-line no-console\n        console.log(message);\n        message = parseMessage(message);\n    }\n    if (activityId === message.activity) {\n        const chatDiv = document.getElementById('messages');\n        const timestampDate = new Date(message.timestamp);\n        chatDiv.innerHTML += `<p>(${timestampDate.getHours()}:${timestampDate.getMinutes()}) \n            ${message.sender}: ${message.text}</p>`;\n    }\n};\n\n/**\n * Parses a message from a string to a JSON object\n * @param {string} message string to be parsed\n * @returns {{type: string, sender: string, text: string, activity: number, timestamp: number}}\n * @throws {Error} if the message is not in a valid JSON format\n */\nconst parseMessage = function(message) {\n    let msg;\n    try {\n        msg = JSON.parse(message);\n    } catch (e) {\n        throw new Error(\"Invalid message format\");\n    }\n    return msg;\n};\n\n/**\n * Sets up the listener for sending messages. Also stores the message in the database, using the saveMessage function.\n * @param {WebSocket} socket websocket object to send and receive messages\n * @param {string} userName username of the user\n * @param {number} activityId id of the activity\n * @param {function(string, string, number, number): void} saveMessage function to save the message in the database\n */\nconst chatSetup = function(socket, userName, activityId, saveMessage) {\n    const msgForm = document.querySelector('form.msg-form');\n\n    const msgFormSubmit = (event) => {\n        event.preventDefault();\n\n        const msgField = document.getElementById('msg');\n        const msgText = msgField.value;\n        const timestamp = Date.now();\n\n        // Store message in database. Ajax is asynchronous, so it might be faster to execute this before sending the message\n        saveMessage(msgText, userName, activityId, timestamp);\n\n        // Prepare and send message to websocket\n        let msg = {\n            type: \"normal\",\n            sender: userName,\n            text: msgText,\n            activity: activityId,\n            timestamp: timestamp\n        };\n        msg = JSON.stringify(msg);\n        socket.send(msg);\n\n        msgField.value = ''; // Clear message field in the form\n    };\n\n    msgForm.addEventListener('submit', (event) => msgFormSubmit(event, socket));\n};"],"names":["define","run","userName","activityId","saveMessage","serverUrl","socket","WebSocket","addEventListener","chatSetup","event","appendMessage","data","populate","getMessages","then","messages","forEach","dbMessage","message","type","sender","username","text","activity","timestamp","isParsed","console","log","parseMessage","chatDiv","document","getElementById","timestampDate","Date","innerHTML","getHours","getMinutes","msg","JSON","parse","e","Error","msgForm","querySelector","preventDefault","msgField","msgText","value","now","stringify","send","msgFormSubmit"],"mappings":";;;;;;AAOAA,6BAAO,IAAI,iBACA,CAQHC,IAAK,SAASC,SAAUC,WAAYC,iBAAaC,iEAAY,sBACnDC,OAAS,IAAIC,UAAUF,WAC7BC,OAAOE,iBAAiB,QAAQ,kBAAMC,UAAUH,OAAQJ,SAAUC,WAAYC,gBAC9EE,OAAOE,iBAAiB,WAAW,SAACE,cAAUC,cAAcD,MAAME,KAAMT,gBAU5EU,SAAU,SAASC,YAAaX,YAEJW,YAAY,IAAKX,YAEzBY,MAAK,SAACC,UAElBA,SAASC,SAAQ,SAACC,eACRC,QAAU,CAACC,KAAM,YAAaC,OAAQH,UAAUI,SAAUC,KAAML,UAAUC,QAASK,SAAUrB,WAC/FsB,UAAWP,UAAUO,WACzBd,cAAcQ,QAAShB,YAAY,cAQvD,IAYMQ,cAAgB,SAASQ,QAAShB,gBAAYuB,oEAC3CA,WAEDC,QAAQC,IAAIT,SACZA,QAAUU,aAAaV,UAEvBhB,aAAegB,QAAQK,SAAU,KAC3BM,QAAUC,SAASC,eAAe,YAClCC,cAAgB,IAAIC,KAAKf,QAAQM,WACvCK,QAAQK,yBAAoBF,cAAcG,uBAAcH,cAAcI,wCAChElB,QAAQE,oBAAWF,QAAQI,eAUnCM,aAAe,SAASV,aACtBmB,QAEAA,IAAMC,KAAKC,MAAMrB,SACnB,MAAOsB,SACC,IAAIC,MAAM,iCAEbJ,KAUL7B,UAAY,SAASH,OAAQJ,SAAUC,WAAYC,iBAC/CuC,QAAUZ,SAASa,cAAc,iBA0BvCD,QAAQnC,iBAAiB,UAAU,SAACE,cAxBd,SAACA,OACnBA,MAAMmC,qBAEAC,SAAWf,SAASC,eAAe,OACnCe,QAAUD,SAASE,MACnBvB,UAAYS,KAAKe,MAGvB7C,YAAY2C,QAAS7C,SAAUC,WAAYsB,eAGvCa,IAAM,CACNlB,KAAM,SACNC,OAAQnB,SACRqB,KAAMwB,QACNvB,SAAUrB,WACVsB,UAAWA,WAEfa,IAAMC,KAAKW,UAAUZ,KACrBhC,OAAO6C,KAAKb,KAEZQ,SAASE,MAAQ,GAGyBI,CAAc1C"}