define("mod_nextblocks/lib",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getMissingInputCalls=getMissingInputCalls,_exports.runTests=_exports.replaceCode=_exports.injectInputBox=_exports.getWorkspaceCode=void 0,_exports.silentRunCode=silentRunCode,_exports.testsAccordion=void 0;
/**
   *
   * @module      mod_nextblocks/env
   * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>
   * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
var injectInputBox=function(i){var inputBox=document.createElement("input");inputBox.setAttribute("type","text"),inputBox.setAttribute("id","programInputBox"+i);var submitButton=document.createElement("button");submitButton.setAttribute("id","programInputButton"+i),submitButton.setAttribute("type","button"),submitButton.innerHTML="Submit",document.getElementById("blocklyDiv").insertAdjacentElement("afterend",inputBox),inputBox.insertAdjacentElement("afterend",submitButton)};_exports.injectInputBox=injectInputBox;var replaceCode=function(code,inputFuncDecsN){document.getElementById("codeDiv").innerHTML=formatCodeHTML(code,inputFuncDecsN)};_exports.replaceCode=replaceCode;var formatCodeHTML=function(code,inputFuncDecsN){var debugMode=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return debugMode?"<pre>"+code+"</pre>":(code=removeForcedInputFunctions(code,inputFuncDecsN),code=removeOutputString(code),code=removeCustomFunctions(code),"<pre>"+(code=removeWrapperFunction(code))+"</pre>")};function removeForcedInputFunctions(code,inputFuncDecsN){var lines=code.split("\n");return lines.splice(0,3*inputFuncDecsN),lines.join("\n")}var removeWrapperFunction=function(code){var lines=code.split("\n");return lines.splice(0,2),lines.splice(-3),lines.join("\n")},removeCustomFunctions=function(code){var lines=code.split("\n");return lines.splice(0,6),lines.join("\n")},removeOutputString=function(code){var lines=code.split("\n");return lines.splice(0,1),lines.join("\n")},runTests=function(code,tests){var results=[];return tests.forEach((function(test){var thisTestCode=code;test.inputs.forEach((function(input){var prompt=Object.keys(input)[0],values=input[prompt],inputIndex=thisTestCode.lastIndexOf(prompt),inputParentheses1=thisTestCode.indexOf("(",inputIndex),inputParentheses2=thisTestCode.indexOf(")",inputParentheses1+1),preStr=thisTestCode.substring(0,inputParentheses1+1),postStr=thisTestCode.substring(inputParentheses2);thisTestCode=preStr+values[0]+postStr}));var codeOutput=silentRunCode(thisTestCode),result=codeOutput=codeOutput.replace(/\s/g,"");results.push(result)})),results};function getMissingInputCalls(code,inputFuncDecs){var functionDecNames=extractFunctionNames(inputFuncDecs),matches=code.match(/((?!\/\/ ).{3}|^.{0,2})\binput\w+\s*\([^)]*\)(?=\s*;|\s*\)|\s*[,)])/g);if(null===matches)return functionDecNames;var functionCallNames=matches.map((function(match){return match.match(/\b(\w+)(?=\s*\()/g)})).flat();return functionDecNames.filter((function(name){return!functionCallNames.includes(name)}))}function extractFunctionNames(input){for(var match,regex=/function\s+(\w+)\s*\(/g,functionNames=[];null!==(match=regex.exec(input));)functionNames.push(match[1]);return functionNames}function silentRunCode(code){return eval(code)}_exports.runTests=runTests;var getWorkspaceCode=function(workspace,inputFuncDecs){var code=javascript.javascriptGenerator.workspaceToCode(workspace);javascript.javascriptGenerator.addReservedWords("print, input");code=inputFuncDecs+"\nlet outputString = ``;\n\nfunction print(string) {\n    outputString += string + '\\n';\n}\nfunction input(prompt) {\n    return prompt;\n}\n(function () {\n    ";for(var blocks=workspace.getTopBlocks(!0),b=0;b<blocks.length;b++){var block=blocks[b];if("start"===block.type){code+=generateDescendantsCode(block);break}}return code+="return outputString;\n})();\n"};function generateDescendantsCode(block){for(var descendants=block.getChildren(!0),descendantsCode="",i=0;i<descendants.length;i++){var descendant=descendants[i];descendantsCode+=Blockly.JavaScript.blockToCode(descendant)}return descendantsCode}_exports.getWorkspaceCode=getWorkspaceCode;var testsAccordion=function(results,testsJSON,uncalledInputFuncs){var testCaseCount=testsJSON.length,accordion='<div style="max-height: 100%; overflow-y: auto;">';null===results&&(accordion+='<div class="alert alert-warning" role="alert">',accordion+="Not all input functions were called. No tests will be run.",accordion+="<br>Input functions not called: "+uncalledInputFuncs.join(", "),accordion+="</div>");for(var i=0;i<testCaseCount;i++)accordion+='<details class="card">',accordion+='<summary class="card-header">',accordion+="Test "+(i+1),null===results||void 0===results[i]?accordion+='<span class="badge badge-warning float-right">Not run</span>':results[i]===testsJSON[i].output?accordion+='<span class="badge badge-success float-right">Passed</span>':accordion+='<span class="badge badge-danger float-right">Failed</span>',accordion+="</summary>",accordion+='<div class="card-body pt-0 pb-0 pl-2 pr-2">',testsJSON[i].inputs.forEach((function(input){for(var key in input)accordion+='<p class="pt-2 m-0">'+key+": </p>",accordion+='<pre class="mt-1 mb-0 test-input">'+input[key][0]+"</pre>"})),accordion+='<p class="pt-2 border-top mt-2 mb-0">Test output: </p>',accordion+='<pre class="mt-1 mb-0 mr-0 ml-0 test-output">'+testsJSON[i].output+"</pre>",accordion+='<div class="p-0">',accordion+='<p class="pt-2 m-0">Your output: </p>',accordion+=null===results?'<pre class="mt-1 mb-0 mr-0 ml-0 test-output">Not run</pre>':'<pre class="pb-2 mt-1 mb-0 ml-0 mr-0 test-output">'+results[i]+"</pre>",accordion+="</div>",accordion+="</details>";return accordion+="</div>"};_exports.testsAccordion=testsAccordion}));

//# sourceMappingURL=lib.min.js.map