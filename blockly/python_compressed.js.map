{"version":3,"sources":["generators/python/colour.js","generators/python/lists.js","generators/python/logic.js","generators/python/loops.js","generators/python/math.js","generators/python/procedures.js","generators/python/text.js","generators/python/variables.js","generators/python/python_generator.js","generators/python/variables_dynamic.js","generators/python.js"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","definitions_","FUNCTION_CALL","colour_rgb","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","valueToCode","NONE","g","b","colour_blend","colour1","colour2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","item","times","MULTIPLICATIVE","lists_length","lists_isEmpty","LOGICAL_NOT","lists_indexOf","list","errorIndex","firstIndexAdjustment","lastIndexAdjustment","workspace","options","oneBasedIndex","lists_getIndex","mode","where","listOrder","MEMBER","at","getAdjustedInt","Error","lists_setIndex","value","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","xVar","lists_getSublist","where1","where2","at1","at2","isNumber","String","lists_sort","type","reverse","sortFunctionName","lists_split","value_input","value_delim","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","PASS","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","order","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","parseInt","branch","addLoopTrap","loopVar","controls_whileUntil","until","controls_for","variable0","getName","increment","defineUpRange","defineDownRange","generateUpDownRange","start","end","inc","Number","Math","abs","range","scrub","arg","suffix","varName","startVar","endVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","Infinity","UNARY_SIGN","math_arithmetic","tuple","ADDITIVE","EXPONENTIATION","math_single","math_constant","CONSTANTS","constant","math_number_property","PROPERTIES","dropdownProperty","inputOrder","outputOrder","numberToCheck","divisor","math_change","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","globals","usedVariables","allUsedVarModels","variable","name","getVars","indexOf","push","devVarList","allDeveloperVariables","length","DEVELOPER_VARIABLE","globalString","funcName","PROCEDURE","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","scrub_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","text_join","element","codeAndOrder","forceString","element0","element1","tempVar","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","COLLECTION","STRING_CONVERSION","BITWISE_NOT","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","LAMBDA","PythonGenerator","CodeGenerator","constructor","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","DEVELOPER_VARIABLE_TYPE","getId","finish","imports","definitions","def","replace","scrubNakedValue","line","string","quote","split","map","lines","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","opt_delta","opt_negate","delta","defaultAtIndex","atOrder","ORDER_ADDITIVE","ORDER_NONE","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","text_prompt","pythonGenerator","Object","assign","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"python_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for colour blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.colour');\n\nimport {Order} from './python_generator.js';\n\n\nexport function colour_picker(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nexport function colour_random(block, generator) {\n  // Generate a random colour.\n  generator.definitions_['import_random'] = 'import random';\n  const code = '\\'#%06x\\' % random.randint(0, 2**24 - 1)';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_rgb(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_('colour_rgb', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b):\n  r = round(min(100, max(0, r)) * 2.55)\n  g = round(min(100, max(0, g)) * 2.55)\n  b = round(min(100, max(0, b)) * 2.55)\n  return '#%02x%02x%02x' % (r, g, b)\n`);\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function colour_blend(block, generator) {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_('colour_blend', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio):\n  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\n  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\n  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\n  ratio = min(1, max(0, ratio))\n  r = round(r1 * (1 - ratio) + r2 * ratio)\n  g = round(g1 * (1 - ratio) + g2 * ratio)\n  b = round(b1 * (1 - ratio) + b2 * ratio)\n  return '#%02x%02x%02x' % (r, g, b)\n`);\n  const colour1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE)\n      || '\\'#000000\\'';\n  const colour2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE)\n      || '\\'#000000\\'';\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\n  const code =\n      functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for list blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.lists');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\n\nexport function lists_create_empty(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\nexport function lists_create_with(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\nexport function lists_repeat(block, generator) {\n  // Create a list with one element repeated.\n  const item = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\n  const times =\n      generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  const code = '[' + item + '] * ' + times;\n  return [code, Order.MULTIPLICATIVE];\n};\n\nexport function lists_length(block, generator) {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  return ['len(' + list + ')', Order.FUNCTION_CALL];\n};\n\nexport function lists_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  const code = 'not len(' + list + ')';\n  return [code, Order.LOGICAL_NOT];\n};\n\nexport function lists_indexOf(block, generator) {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || '[]';\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let errorIndex = ' -1';\n  let firstIndexAdjustment = '';\n  let lastIndexAdjustment = ' - 1';\n\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    firstIndexAdjustment = ' + 1';\n    lastIndexAdjustment = '';\n  }\n\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_('first_index', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = my_list.index(elem)${firstIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`);\n  } else {\n    functionName = generator.provideFunction_('last_index', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = len(my_list) - my_list[::-1].index(elem)${lastIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`);\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_getIndex(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(0)';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(0)\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const code = list + '[-1]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop()\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM':\n      generator.definitions_['import_random'] = 'import random';\n      if (mode === 'GET') {\n        const code = 'random.choice(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else {\n        const functionName =\n            generator.provideFunction_('lists_remove_random_item', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  x = int(random.random() * len(myList))\n  return myList.pop(x)\n`);\n        const code = functionName + '(' + list + ')';\n        if (mode === 'GET_REMOVE') {\n          return [code, Order.FUNCTION_CALL];\n        } else if (mode === 'REMOVE') {\n          return code + '\\n';\n        }\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nexport function lists_setIndex(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n    return code;\n  }\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(0, ' + value + ')\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        return list + '[-1] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.append(' + value + ')\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_random'] = 'import random';\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += xVar + ' = int(random.random() * len(' + list + '))\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + '\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ')\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nexport function lists_getSublist(block, generator) {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        generator.definitions_['import_sys'] = 'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n  const code = list + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n};\n\nexport function lists_sort(block, generator) {\n  // Block for sorting a list.\n  const list = (generator.valueToCode(block, 'LIST', Order.NONE) || '[]');\n  const type = block.getFieldValue('TYPE');\n  const reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\n  const sortFunctionName = generator.provideFunction_('lists_sort', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\n  def try_float(s):\n    try:\n      return float(s)\n    except:\n      return 0\n  key_funcs = {\n    \"NUMERIC\": try_float,\n    \"TEXT\": str,\n    \"IGNORE_CASE\": lambda s: str(s).lower()\n  }\n  key_func = key_funcs[type]\n  list_cpy = list(my_list)\n  return sorted(list_cpy, key=key_func, reverse=reverse)\n`);\n\n  const code =\n      sortFunctionName + '(' + list + ', \"' + type + '\", ' + reverse + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_split(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  const mode = block.getFieldValue('MODE');\n  let code;\n  if (mode === 'SPLIT') {\n    const value_input =\n        generator.valueToCode(block, 'INPUT', Order.MEMBER) || \"''\";\n    const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE);\n    code = value_input + '.split(' + value_delim + ')';\n  } else if (mode === 'JOIN') {\n    const value_input =\n        generator.valueToCode(block, 'INPUT', Order.NONE) || '[]';\n    const value_delim =\n        generator.valueToCode(block, 'DELIM', Order.MEMBER) || \"''\";\n    code = value_delim + '.join(' + value_input + ')';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function lists_reverse(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const code = 'list(reversed(' + list + '))';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for logic blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.logic');\n\nimport {Order} from './python_generator.js';\n\n\nexport function controls_if(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '', branchCode, conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'False';\n    branchCode =\n        generator.statementToCode(block, 'DO' + n) ||\n        generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += (n === 0 ? 'if ' : 'elif ') + conditionCode + ':\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode =\n        generator.statementToCode(block, 'ELSE') || generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n};\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_operation(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? 'and' : 'or';\n  const order =\n      (operator === 'and') ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'False';\n    argument1 = 'False';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === 'and') ? 'True' : 'False';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nexport function logic_negate(block, generator) {\n  // Negation.\n  const argument0 =\n      generator.valueToCode(block, 'BOOL', Order.LOGICAL_NOT) || 'True';\n  const code = 'not ' + argument0;\n  return [code, Order.LOGICAL_NOT];\n};\n\nexport function logic_boolean(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'True' : 'False';\n  return [code, Order.ATOMIC];\n};\n\nexport function logic_null(block, generator) {\n  // Null data type.\n  return ['None', Order.ATOMIC];\n};\n\nexport function logic_ternary(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'False';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'None';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'None';\n  const code = value_then + ' if ' + value_if + ' else ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for loop blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.loops');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\n\nexport function controls_repeat_ext(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  const code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 = generator.valueToCode(\n                      block, 'BOOL',\n                      until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'False';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ':\\n' + branch;\n};\n\nexport function controls_for(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  let argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  let argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  let increment = generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n\n  let code = '';\n  let range;\n\n  // Helper functions.\n  const defineUpRange = function() {\n    return generator.provideFunction_('upRange', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start <= stop:\n    yield start\n    start += abs(step)\n`);\n  };\n  const defineDownRange = function() {\n    return generator.provideFunction_('downRange', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start >= stop:\n    yield start\n    start -= abs(step)\n`);\n  };\n  // Arguments are legal generator code (numbers or strings returned by scrub()).\n  const generateUpDownRange = function(start, end, inc) {\n    return '(' + start + ' <= ' + end + ') and ' + defineUpRange() + '(' +\n        start + ', ' + end + ', ' + inc + ') or ' + defineDownRange() + '(' +\n        start + ', ' + end + ', ' + inc + ')';\n  };\n\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All parameters are simple numbers.\n    argument0 = Number(argument0);\n    argument1 = Number(argument1);\n    increment = Math.abs(Number(increment));\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\n      // All parameters are integers.\n      if (argument0 <= argument1) {\n        // Count up.\n        argument1++;\n        if (argument0 === 0 && increment === 1) {\n          // If starting index is 0, omit it.\n          range = argument1;\n        } else {\n          range = argument0 + ', ' + argument1;\n        }\n        // If increment isn't 1, it must be explicit.\n        if (increment !== 1) {\n          range += ', ' + increment;\n        }\n      } else {\n        // Count down.\n        argument1--;\n        range = argument0 + ', ' + argument1 + ', -' + increment;\n      }\n      range = 'range(' + range + ')';\n    } else {\n      // At least one of the parameters is not an integer.\n      if (argument0 < argument1) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\n    }\n  } else {\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    const scrub = function(arg, suffix) {\n      if (stringUtils.isNumber(arg)) {\n        // Simple number.\n        arg = Number(arg);\n      } else if (!arg.match(/^\\w+$/)) {\n        // Not a variable, it's complicated.\n        const varName = generator.nameDB_.getDistinctName(\n            variable0 + suffix, NameType.VARIABLE);\n        code += varName + ' = ' + arg + '\\n';\n        arg = varName;\n      }\n      return arg;\n    };\n    const startVar = scrub(argument0, '_start');\n    const endVar = scrub(argument1, '_end');\n    const incVar = scrub(increment, '_inc');\n\n    if (typeof startVar === 'number' && typeof endVar === 'number') {\n      if (startVar < endVar) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + startVar + ', ' + endVar + ', ' + incVar + ')';\n    } else {\n      // We cannot determine direction statically.\n      range = generateUpDownRange(startVar, endVar, incVar);\n    }\n  }\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\n  return code;\n};\n\nexport function controls_forEach(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.RELATIONAL) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n};\n\nexport function controls_flow_statements(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + 'continue\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for math blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.math');\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\n\n// If any new block imports any library, add that library name here.\n// RESERVED WORDS: 'math,random,Number'\n\nexport function math_number(block, generator) {\n  // Numeric value.\n  let code = Number(block.getFieldValue('NUM'));\n  let order;\n  if (code === Infinity) {\n    code = 'float(\"inf\")';\n    order = Order.FUNCTION_CALL;\n  } else if (code === -Infinity) {\n    code = '-float(\"inf\")';\n    order = Order.UNARY_SIGN;\n  } else {\n    order = code < 0 ? Order.UNARY_SIGN : Order.ATOMIC;\n  }\n  return [code, order];\n};\n\nexport function math_arithmetic(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ** ', Order.EXPONENTIATION],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n  // In case of 'DIVIDE', division between integers returns different results\n  // in generator 2 and 3. However, is not an issue since Blockly does not\n  // guarantee identical results in all languages.  To do otherwise would\n  // require every operator to be wrapped in a function call.  This would kill\n  // legibility of the generated code.\n};\n\nexport function math_single(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    code = generator.valueToCode(block, 'NUM', Order.UNARY_SIGN) || '0';\n    return ['-' + code, Order.UNARY_SIGN];\n  }\n  generator.definitions_['import_math'] = 'import math';\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg =\n        generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'math.fabs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log10(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'COS':\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'TAN':\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ASIN':\n      code = 'math.asin(' + arg + ') / math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'math.acos(' + arg + ') / math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'math.atan(' + arg + ') / math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATIVE];\n};\n\nexport function math_constant(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['math.pi', Order.MEMBER],\n    'E': ['math.e', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.MEMBER],\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Order.MEMBER],\n    'INFINITY': ['float(\\'inf\\')', Order.ATOMIC],\n  };\n  const constant = block.getFieldValue('CONSTANT');\n  if (constant !== 'INFINITY') {\n    generator.definitions_['import_math'] = 'import math';\n  }\n  return CONSTANTS[constant];\n};\n\nexport function math_number_property(block, generator) {\n   // Check if a number is even, odd, prime, whole, positive, or negative\n   // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE,\n        Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE,\n        Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  }\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    generator.definitions_['import_math'] = 'import math';\n    generator.definitions_['from_numbers_import_Number'] =\n        'from numbers import Number';\n    const functionName = generator.provideFunction_('math_isPrime', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(n):\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  # If n is not a number but a string, try parsing it.\n  if not isinstance(n, Number):\n    try:\n      n = float(n)\n    except:\n      return False\n  if n == 2 or n == 3:\n    return True\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\n    return False\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\n      return False\n  return True\n`);\n       code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will raise an error.\n    if (divisor === '0') {\n      return ['False', Order.ATOMIC];\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  };\n  return [code, outputOrder];\n};\n\nexport function math_change(block, generator) {\n  // Add to a variable in place.\n  generator.definitions_['from_numbers_import_Number'] =\n      'from numbers import Number';\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = (' + varName + ' if isinstance(' + varName +\n      ', Number) else 0) + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  let code;\n  switch (func) {\n    case 'SUM':\n      code = 'sum(' + list + ')';\n      break;\n    case 'MIN':\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE': {\n      generator.definitions_['from_numbers_import_Number'] =\n          'from numbers import Number';\n      // This operation excludes null and values that aren't int or float:\n      // math_mean([null, null, \"aString\", 1, 9]) -> 5.0\n      const functionName = generator.provideFunction_('math_mean', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = [e for e in myList if isinstance(e, Number)]\n  if not localList: return\n  return float(sum(localList)) / len(localList)\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      generator.definitions_['from_numbers_import_Number'] =\n          'from numbers import Number';\n      // This operation excludes null values:\n      // math_median([null, null, 1, 3]) -> 2.0\n      const functionName = generator.provideFunction_( 'math_median', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = sorted([e for e in myList if isinstance(e, Number)])\n  if not localList: return\n  if len(localList) % 2 == 0:\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\n  else:\n    return localList[(len(localList) - 1) // 2]\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\n      const functionName = generator.provideFunction_('math_modes', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(some_list):\n  modes = []\n  # Using a lists of [item, count] to keep count rather than dict\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\n  counts = []\n  maxCount = 1\n  for item in some_list:\n    found = False\n    for count in counts:\n      if count[0] == item:\n        count[1] += 1\n        maxCount = max(maxCount, count[1])\n        found = True\n    if not found:\n      counts.append([item, 1])\n  for counted_item, item_count in counts:\n    if item_count == maxCount:\n      modes.append(counted_item)\n  return modes\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      generator.definitions_['import_math'] = 'import math';\n      const functionName =\n          generator.provideFunction_('math_standard_deviation', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers):\n  n = len(numbers)\n  if n == 0: return\n  mean = float(sum(numbers)) / n\n  variance = sum((x - mean) ** 2 for x in numbers) / n\n  return math.sqrt(variance)\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM':\n      generator.definitions_['import_random'] = 'import random';\n      code = 'random.choice(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_modulo(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) ||\n      '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) ||\n      '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n};\n\nexport function math_constrain(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) ||\n      'float(\\'inf\\')';\n  const code =\n      'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_int(block, generator) {\n  // Random integer between [X] and [Y].\n  generator.definitions_['import_random'] = 'import random';\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function math_random_float(block, generator) {\n  // Random fraction between 0 and 1.\n  generator.definitions_['import_random'] = 'import random';\n  return ['random.random()', Order.FUNCTION_CALL];\n};\n\nexport function math_atan2(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  generator.definitions_['import_math'] = 'import math';\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\n    Order.MULTIPLICATIVE\n  ];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for procedure blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.procedures');\n\nimport * as Variables from '../../core/variables.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\n\nexport function procedures_defreturn(block, generator) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  const globals = [];\n  const workspace = block.workspace;\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\n  for (let i = 0, variable; (variable = usedVariables[i]); i++) {\n    const varName = variable.name;\n    if (block.getVars().indexOf(varName) === -1) {\n      globals.push(generator.nameDB_.getName(varName, NameType.VARIABLE));\n    }\n  }\n  // Add developer variables.\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    globals.push(\n        generator.nameDB_.getName(\n          devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n\n  const globalString = globals.length ?\n      generator.INDENT + 'global ' + globals.join(', ') + '\\n' :\n      '';\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  let branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = generator.PASS;\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' + globalString +\n      xfix1 + loopTrap + branch + xfix2 + returnValue;\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] =\n        generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'None';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function procedures_callnoreturn(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + '\\n';\n};\n\nexport function procedures_ifreturn(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'False';\n  let code = 'if ' + condition + ':\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block), generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'None';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for text blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.texts');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\n\nexport function text(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nexport function text_multiline(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\n  return [code, order];\n};\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'str(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and\n *    the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['str(' + value + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_join(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  // Should we allow joining by '-' or ',' or any other characters?\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element =\n          generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 =\n          generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const element1 =\n          generator.valueToCode(block, 'ADD1', Order.NONE) || \"''\";\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITIVE];\n    }\n    default: {\n      const elements = [];\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] =\n            generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const tempVar =\n          generator.nameDB_.getDistinctName('x', NameType.VARIABLE);\n      const code = '\\'\\'.join([str(' + tempVar + ') for ' + tempVar + ' in [' +\n          elements.join(', ') + ']])';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n};\n\nexport function text_append(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return varName + ' = str(' + varName + ') + ' + forceString(value)[0] + '\\n';\n};\n\nexport function text_length(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return ['len(' + text + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_isEmpty(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  const code = 'not len(' + text + ')';\n  return [code, Order.LOGICAL_NOT];\n};\n\nexport function text_indexOf(block, generator) {\n  // Search the text for a substring.\n  // Should we allow for non-case sensitive???\n  const operator = block.getFieldValue('END') === 'FIRST' ? 'find' : 'rfind';\n  const substring =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_charAt(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '[0]';\n      return [code, Order.MEMBER];\n    }\n    case 'LAST': {\n      const code = text + '[-1]';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_random'] = 'import random';\n      const functionName =\n          generator.provideFunction_('text_random_letter', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(text):\n  x = int(random.random() * len(text))\n  return text[x]\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nexport function text_getSubstring(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const text =\n      generator.valueToCode(block, 'STRING', Order.MEMBER) || \"''\";\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        generator.definitions_['import_sys'] = 'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = text + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n};\n\nexport function text_changeCase(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.upper()',\n    'LOWERCASE': '.lower()',\n    'TITLECASE': '.title()'\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_trim(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': '.lstrip()',\n    'RIGHT': '.rstrip()',\n    'BOTH': '.strip()'\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_print(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n};\n\nexport function text_prompt_ext(block, generator) {\n  // Prompt function.\n  const functionName = generator.provideFunction_('text_prompt', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg):\n  try:\n    return raw_input(msg)\n  except NameError:\n    return input(msg)\n`);\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = functionName + '(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'float(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const code = text + '.count(' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nexport function text_replace(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = text + '.replace(' + from + ', ' + to + ')';\n  return [code, Order.MEMBER];\n};\n\nexport function text_reverse(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + '[::-1]';\n  return [code, Order.MEMBER];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.variables');\n\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\n\nexport function variables_get(block, generator) {\n  // Variable getter.\n  const code =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return [code, Order.ATOMIC];\n};\n\nexport function variables_set(block, generator) {\n  // Variable setter.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + '\\n';\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Python for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport * as Variables from '../../core/variables.js';\n// import type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names, NameType} from '../../core/names.js';\n// import type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * http://docs.python.org/reference/expressions.html#summary\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,             // 0 \"\" ...\n  COLLECTION: 1,         // tuples, lists, dictionaries\n  STRING_CONVERSION: 1,  // `expression...`\n  MEMBER: 2.1,           // . []\n  FUNCTION_CALL: 2.2,    // ()\n  EXPONENTIATION: 3,     // **\n  UNARY_SIGN: 4,         // + -\n  BITWISE_NOT: 4,        // ~\n  MULTIPLICATIVE: 5,     // * / // %\n  ADDITIVE: 6,           // + -\n  BITWISE_SHIFT: 7,      // << >>\n  BITWISE_AND: 8,        // &\n  BITWISE_XOR: 9,        // ^\n  BITWISE_OR: 10,        // |\n  RELATIONAL: 11,        // in, not in, is, is not, >, >=, <>, !=, ==\n  LOGICAL_NOT: 12,       // not\n  LOGICAL_AND: 13,       // and\n  LOGICAL_OR: 14,        // or\n  CONDITIONAL: 15,       // if else\n  LAMBDA: 16,            // lambda\n  NONE: 99,              // (...)\n};\n\n/**\n * PythonScript code generator class.\n */\nexport class PythonGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // not (not foo) -> not not foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a and (b and c) -> a and b and c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a or (b or c) -> a or b or c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n\n  constructor(name) {\n    super(name ?? 'Python');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // import keyword\n      // print(','.join(sorted(keyword.kwlist)))\n      // https://docs.python.org/3/reference/lexical_analysis.html#keywords\n      // https://docs.python.org/2/reference/lexical_analysis.html#keywords\n      'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\n      'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,' +\n      'not,or,pass,print,raise,return,try,while,with,yield,' +\n      // https://docs.python.org/3/library/constants.html\n      // https://docs.python.org/2/library/constants.html\n      'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\n      // >>> print(','.join(sorted(dir(__builtins__))))\n      // https://docs.python.org/3/library/functions.html\n      // https://docs.python.org/2/library/functions.html\n      'ArithmeticError,AssertionError,AttributeError,BaseException,' +\n      'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\n      'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\n      'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,' +\n      'EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,' +\n      'FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,' +\n      'IOError,ImportError,ImportWarning,IndentationError,IndexError,' +\n      'InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,' +\n      'LookupError,MemoryError,ModuleNotFoundError,NameError,' +\n      'NotADirectoryError,NotImplemented,NotImplementedError,OSError,' +\n      'OverflowError,PendingDeprecationWarning,PermissionError,' +\n      'ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,' +\n      'RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,' +\n      'StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,' +\n      'TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,' +\n      'UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,' +\n      'UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,' +\n      '__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,' +\n      'abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,' +\n      'callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,' +\n      'delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,' +\n      'float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,' +\n      'int,intern,isinstance,issubclass,iter,len,license,list,locals,long,' +\n      'map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,' +\n      'quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,' +\n      'slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,' +\n      'vars,xrange,zip'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   * @this {CodeGenerator}\n   */\n  init(workspace) {\n    super.init(workspace);\n\n    /**\n     * Empty loops or conditionals are not allowed in Python.\n     */\n    this.PASS = this.INDENT + 'pass\\n';\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(devVarList[i], Names.DEVELOPER_VARIABLE_TYPE) +\n          ' = None');\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE) +\n          ' = None');\n    }\n\n    this.definitions_['variables'] = defvars.join('\\n');\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with import statements and variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const imports = [];\n    const definitions = [];\n    for (let name in this.definitions_) {\n      const def = this.definitions_[name];\n      if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\n        imports.push(def);\n      } else {\n        definitions.push(def);\n      }\n    }\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + '\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped Python string, complete with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Python string.\n   * @protected\n   */\n  quote_(string) {\n    string = string.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\\\n');\n\n    // Follow the CPython behaviour of repr() for a non-byte string.\n    let quote = '\\'';\n    if (string.indexOf('\\'') !== -1) {\n      if (string.indexOf('\"') === -1) {\n        quote = '\"';\n      } else {\n        string = string.replace(/'/g, '\\\\\\'');\n      }\n    }\n    return quote + string + quote;\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline Python string, complete\n   * with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Python string.\n   * @protected\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // + '\\n' +\n    return lines.join(' + \\'\\\\n\\' + \\n');\n  }\n\n  /**\n   * Common tasks for generating Python from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The Python code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n   * @return {string} Python code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '# ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '# ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value, taking into account indexing.\n   * If a static int, casts to an integer, otherwise returns a code string.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @return {string|number}\n   */\n  getAdjustedInt(block, atId, opt_delta, opt_negate) {\n    let delta = opt_delta || 0;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n    const atOrder = delta ? this.ORDER_ADDITIVE : this.ORDER_NONE;\n    let at = this.valueToCode(block, atId, atOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = parseInt(at, 10) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = 'int(' + at + ' + ' + delta + ')';\n      } else if (delta < 0) {\n        at = 'int(' + at + ' - ' + -delta + ')';\n      } else {\n        at = 'int(' + at + ')';\n      }\n      if (opt_negate) {\n        at = '-' + at;\n      }\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for dynamic variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.variablesDynamic');\n\n\n// generator is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Python for\n *     blocks.  This is the entrypoint for python_compressed.js.\n * @suppress {extraRequire}\n */\n\nimport * as goog from '../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.all');\n\nimport {PythonGenerator} from './python/python_generator.js';\nimport * as colour from './python/colour.js';\nimport * as lists from './python/lists.js';\nimport * as logic from './python/logic.js';\nimport * as loops from './python/loops.js';\nimport * as math from './python/math.js';\nimport * as procedures from './python/procedures.js';\nimport * as text from './python/text.js';\nimport * as variables from './python/variables.js';\nimport * as variablesDynamic from './python/variables_dynamic.js';\n\nexport * from './python/python_generator.js';\n\n/**\n * Python code generator instance.\n * @type {!PythonGenerator}\n */\nexport const pythonGenerator = new PythonGenerator();\n\n// Add reserved words.  This list should include all words mentioned\n// in RESERVED WORDS: comments in the imports above.\npythonGenerator.addReservedWords('math,random,Number');\n\n// Install per-block-type generator functions:\nObject.assign(\n  pythonGenerator.forBlock,\n  colour, lists, logic, loops, math, procedures,\n  text, variables, variablesDynamic\n);\n"]}